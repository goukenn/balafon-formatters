{
    "settings": {
        "noSpaceJoin": true,
        "transfromEngine":"html"
    },
    "repository": {
        "html-space-constant": {
            "match": "\\s+",
            "name": "constant.empty.space.html",
            "replaceWith": " "
        },
        "string": {
            "begin": "(\"|')",
            "end": "\\$1",
            "name": "string.definition",
            "allowMultiline": false,
            "tokenID": "string",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "escaped.char"
                }
            ]
        },
        "string-named": {
            "begin": "(\"|')",
            "end": "\\$1",
            "name": "string.definition.with.name",
            "allowMultiline": false,
            "tokenID": "string",
            "patterns": [
                {
                    "match": "(?i)\\bbondje\\b",
                    "name": "author.name",
                    "transform": [
                        "upperCase"
                    ]
                },
                {
                    "match": "\\\\.",
                    "name": "escaped.char"
                }
            ]
        },
        "url": {
            "match": "(?i)(?<scheme>(?:ftp|http(?:s)|[a-z]+)):(?:\\/\\/|\\/|)(?<path>(?:\\/|\\.\\.(?:\\/)?|\\.(?:\\/)?)[^\\/\\)\\(]+(?:\\/|\/[^\\/\\)\\()\\;]+))(?:;(?<queryo>[^\\?\\#]+))?(?:\\?(?<query>[^\\#]+))?(?:(?<anchor>#.+))?",
            "name": "url.text",
            "tokenID": "url",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "escaped.char"
                }
            ]
        },
        "tag-definition": {
            "begin": "\\<(\\b[\\w]+\\b)",
            "end": "(\\/|\\<\\/$1\\s*)?\\>",
            "name": "tag.definition.html",
            "tokenID": "tagname",
            "isBlock": false, 
            "endCaptures": {
                "0": {
                    "comment": "remove not used white space",
                    "match": "<\\/([\\w]+)\\s+\\>",
                    "replaceWith": "\\<\\/$1\\>"
                }
            },
            "patterns": [
                {
                    "include": "#end-tag"
                },
                {
                    "match": "(?=\\<\\/[\\w]+\\>)",
                    "name": "end.tag.block.html",
                    "tokenID": "endtag.block"
                },
                {
                    "match": "(?:\\>)",
                    "name": "start.html.end.block.html",
                    "lineFeed": false,
                    "updateParentProps": {
                        "isBlock": true
                    }
                },
                {
                    "match": "(\\/\\>)",
                    "name": "start.empty.html.block.html",
                    "tokenID": "endtag.block",
                    "lineFeed": true,
                    "updateParentProps": {
                        "isBlock": true
                    }
                },
                {
                    "include": "#html-attribute"
                },
                {
                    "include": "#function-html-attribute"
                },
                {
                    "include": "#bracket-html-attribute"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#operator"
                }
            ],
            "updateParentProps":{
                "isBlock":true
            }
        },
        "empty-tag": {
            "begin": "\\<([\\w]+)\\s*\\/\\>",
            "end": "(?:>)",
            "lineFeed": true,
            "tokenID": "empty.tag",
            "name": "empty.tag.definition.html",
            "updateParentProps":{
                "isBlock":true
            }
        },
        "operator": {
            "match": "\\s*(\\+|\\*|-|%|=)\\s*",
            "name": "tag.operator.html",
            "tokenID": "tag.operator",
            "replaceWith": "$1",
            "nextTrimWhiteSpace": true
        },
        "comment": {
            "begin": "\\<\\!--",
            "end": "--\\>",
            "tokenID": "comment",
            "name": "comment.html",
            "lineFeed": true
        },
        "doctype": {
            "begin": "\\<!DOCTYPE",
            "end": "\\>",
            "tokenID": "doctype",
            "name": "constant.doctype.html",
            "lineFeed": true,
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#url"
                }
            ]
        },
        "processor-expression": {
            "begin": "\\<\\?[\\w]+",
            "end": "\\?>",
            "tokenID": "processor",
            "name": "constant.processor.html",
            "lineFeed": true,
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#url"
                }
            ]
        },
        "end-tag": {
            "begin": "\\<\\/[\\w]+(\\s+|$)",
            "end": "\\>",
            "tokenID": "detect-bad-end.tag",
            "name": "end.tag.definition.html",
            "comment": "detect non well formed end tags",
            "nextTrimWhiteSpace": true,
            "transformToken": true,
            "endCaptures": {
                "0": {
                    "nextTrimWhiteSpace": true
                }
            }
        },
        "html-attribute": {
            "match": "(\\*)?\\b[\\w]+\\b",
            "name": "tag.attribute.html"
        },
        "bracket-html-attribute": {
            "match": "\\[\\s*\\b[\\w]+\\b\\*\\]",
            "name": "tag.bracket.attribute.html"
        },
        "function-html-attribute": {
            "match": "\\[\\s*\\b[\\w]+\\b\\*\\]",
            "name": "tag.function.attribute.html"
        },
        "global-self-closing-html-tag":{
            "begin":"(<)(img|link|br)\\b",
            "end":"(\\/)?>",
            "comment":"image tag must be consider as a global self closing element",
            "name":"auto.closing.tag.html",
            "beginCaptures":{
                "1":{"name":"symbol.start.tag.html"},
                "2":{"name":"tagname.html"}
            },
            "endCaptures":{
                "0":{
                    "name":"end.capture",
                    "patterns":[
                        {
                            "match":">", 
                            "replaceWith":"/>",
                            "name":"detect.missing.close.tag.html",
                            "captures":{
                                "0":{"name":"symbol.end.tag.html"}
                            }
                        }
                    ]
                }
            },
            "patterns":[
                {
                    "include":"#html-attribute"
                }
            ]
        },
        "global-html-tag": {
            "begin": "(\\<)\\b([\\w][\\w:\\-]*)\\b",
            "end": "(?:\\s*\\/\\>|\\<\\/$2\\s*>)",
            "name": "global.html.tag.html", 
            "beginCaptures":{
                "1":{"name":"symbol.start.tag.html"},
                "2":{"name":"tagname.html"}
            },
            "endCaptures": {
                "0": {
                    "name": "html.end.tag_definition",
                    "transform": [
                        "trim"
                    ],
                    "patterns": [
                        {
                            "match": "^\\s*\\/\\>",
                            "name": "close.tag",
                            "replaceWith": "(>)(</)($2)(>)",
                            "replaceWithCondition": {
                                "check": "$2",
                                "operator": "!=",
                                "match": "br|hr|img|input|source|link|meta|base|col|embed|param|track|wbr"
                            },
                            "updateParentProps": {
                                "isBlock": false
                            },
                            "captures":{
                                "1":{"name":"symbol.end.tag.html"},
                                "2":{"name":"symbol.start.close.tag.html"},
                                "3":{"name":"tagname.html"},
                                "4":{"name":"symbol.end.tag.html"}
                            }
                        },
                        {
                            "match": "(\\<\\/)(\\b[\\w][\\w:\\-]*\\b)(\\s*)(\\>)",
                            "name": "end.tag.html",
                            "tokenID":"endTagName",
                            "captures":{
                                "1":{"name":"symbol.end.tag.html"},
                                "2":{"name":"tagname.html"},
                                "4":{"name":"symbol.end.tag.html"},
                                "3":{"name":"ignore.end.tag", "transform":"trim", "replaceWith":"_E_"}
                            }
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "begin":"(?=<\\/\\b([\\w][\\w:\\-]*)\\s*$)",
                    "end":"(?=>)",
                    "name":"detect.non.well.ended.tagname.html"
                },
                {
                    "begin": "([\\w\\-]+)\\s*",
                    "end": "(?=([=]|>|\\s|$))",
                    "name": "attribute.html",
                    "tokenID": "attribute",
                    "comment": "detect attribute definition-primary",
                    "beginCaptures": {
                        "0": {
                            "transform": "trim"
                        }
                    }
                },
                {
                    "begin": "\\s*=\\s*",
                    "end": "(?=[\\w]|\\/|\\>)",
                    "name": "operator.attribute.affectation.html",
                    "beginCaptures": {
                        "0": {
                            "transform": "trim"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#string"
                        }
                    ]
                },
                {
                    "match":"\\s+(?=\\>)",
                    "replaceWith":""
                },
                {
                    "begin": "(\\>)",
                    "end": "(?=\\<(\\/)?)",
                    "name": "inner.html",
                    "comment": "Detect inner content. start block definition if contains global.html.tag.html",
                    "requestParentBlockCondition": "child.name == global.html.tag.html",
                    "updateParentProps": {
                        "isBlock": true
                    },
                    "beginCaptures": {
                        "0": {
                            "name": "start.inner.html"
                        },
                        "1": {
                            "name": "symbol.inner.end.tag.html"
                        }
                    },
                    "patterns": [
                        {
                            "include":"#global-self-closing-html-tag"
                        },
                        {
                            "include": "#global-html-tag"
                        },
                        {
                            "include": "#html-space-constant"
                        },
                        {
                            "include": "#string"
                        },
                        {
                            "include": "#url"
                        }
                    ]
                }
            ],
            "lineFeed":true,
            "updateParentProps":{
                "isBlock":true
            }
        }
    },
    "patterns": [
        {
            "include":"#global-self-closing-html-tag"
        },
        {
            "include": "#global-html-tag"
        },
        {
            "include": "#string-named"
        },
        {
            "include": "#string"
        },
        {
            "include": "#url"
        },
        {
            "include": "#comment"
        },
        {
            "include": "#doctype"
        },
        {
            "include": "#end-tag"
        },
        {
            "include": "#processor-expression"
        }
    ],
    "scopeName": "source.text.html",
    "repository__":{
        "main":{
            "name":"start.main",
            "match":"\\b\\w+\\b",
            "patterns":[
                { "include":"#main"}
            ]
        }
    },
    "patterns__":[
        { "include":"#main"}
    ]


}