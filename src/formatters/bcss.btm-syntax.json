{
    "scopeName": "source.bcss",
    "comment": "balafon .bcss formatter",
    "$schema": "https://igkdev.com/schemas/btm-syntax.json",
    "repository": {
        "skip-multispace": {
            "name": "meta.join.multispace.bcss",
            "match": "\\s+",
            "replaceWith": " "
        },
        "global-definition-content": {
            "name": "global-litteral-def-content",
            "patterns": [
                {
                    "name": "variable.language.custom.property.bcss",
                    "match": "(?:\\-)+[a-z0-9\\-]+"
                },
                {
                    "include": "#selector-detection"
                },
                {
                    "match": "\\b([\\w]+)\\b\\s*",
                    "name": "word",
                    "transform": [
                        "trim",
                        "[$0]"
                    ]
                },
                {
                    "include": "#string"
                },
                {
                    "begin": "\\s*(:)\\s*",
                    "end": "(?=;|})",
                    "name": "punction-global-def-1",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.punctuation.property.definition.bcss",
                            "transform": [
                                "trim",
                                "[$0 ]"
                            ]
                        }
                    },
                    "patterns": [
                        {
                            "include": "#css-value-definition"
                        }
                    ]
                },
                {
                    "include": "#single-comment"
                },
                {
                    "include": "#skip-multispace"
                },
                {
                    "include": "#end-instruction"
                }
            ]
        },
        "end-instruction": {
            "name": "keyword.operator.punctuation.end.instruction.bcss",
            "match": "\\s*(;)\\s*",
            "transform": [
                "trim"
            ],
            "isInstructionSeparator": true,
            "formattingMode": 1
        },
        "root-directive": {
            "begin": "(?=\\s*(@\\b(?:root))\\b)",
            "end": "(?<=\\})",
            "patterns": [
                {
                    "begin": "(@root)",
                    "end": "(?<=\\})",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.root.directive.bcss root.directive.bcss",
                            "className": "directive"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#property-only-definition-block"
                        }
                    ]
                }
            ]
        },
        "media-directive": {
            "begin": "(?=\\s*(@\\b(?:def|(x(x)?)?(sm|lg)(-screen)?))\\b)",
            "end": "(?<=\\})",
            "patterns": [
                {
                    "match": "\\s*(@\\b(?:def|(x(x)?)?(sm|lg)(-screen)?))\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control.media.directive.bcss media.directive.bcss",
                            "className": "directive"
                        }
                    }
                },
                {
                    "include": "#bcss-media-block"
                }
            ]
        },
        "css-value-defs": {
            "begin": "\\s*(:)\\s*",
            "end": "(?=;|})",
            "contentName": "value.definition.inner.bcss",
            "name": "marker.inner.content.bcss",
            "beginCaptures": {
                "0": {
                    "name": "keyword.operator.punctuation.property.definition.bcss",
                    "transform": [
                        "trim",
                        "[$0 ]"
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#css-value-definition"
                },
                {
                    "include": "#skip-multispace"
                }
            ]
        },
        "property-only-definition-block": {
            "begin": "(\\{)",
            "end": "(\\})",
            "name": "property.only.block",
            "isBlock": true,
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.punctuation.branket.start.bcss"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "keyword.operator.punctuation.branket.end.bcss"
                }
            },
            "patterns": [
                {
                    "match": "(-)+\\s*$",
                    "name": "invalid.property.definition",
                    "formattingMode": 1
                },
                {
                    "include": "#single-comment"
                },
                {
                    "include": "#custom-property-name-def"
                },
                {
                    "include": "#css-value-defs"
                },
                {
                    "include": "#end-instruction"
                }
            ]
        },
        "custom-property-name-def": {
            "match": "(\\-*)?\\b[a-zA-Z]+([a-zA-Z0-9\\-]+)?\\b(-)*",
            "name": "support.type.property-name.custom.property.bcss"
        },
        "bcss-glue-white-space": {
            "match": "\\s+|$",
            "name": "glue.skip.white-space.bcss",
            "isGlueValue": " ",
            "replaceWith": " "
        },
        "bcss-glue-selector-white-space": {
            "match": "(\\s+)",
            "name": "glue.skip.selector.white-space.bcss",
            "replaceWith": "",
            "isGlueValue": " "
        },
        "color-directive": {
            "begin": "(?=\\s*(@\\b(?:colors))\\b)",
            "end": "(?=\\})",
            "patterns": [
                {
                    "begin": "\\s*(@\\b(?:colors))\\b",
                    "end": "(?=\\})",
                    "beginCaptures": {
                        "1": {
                            "className": "directive",
                            "name": "keyword.control.color.directive.bcss color.directive.bcss"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#bcss-glue-white-space"
                        },
                        {
                            "begin": "\\b(light|dark)\\b",
                            "end": "(?<=\\})",
                            "beginCaptures": {
                                "1": {
                                    "name": "variable.other.event.constant.directive.theme.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#color-block-directive"
                                },
                                {
                                    "match": "\\s+",
                                    "replaceWith": ""
                                }
                            ]
                        },
                        {
                            "include": "#color-block-directive"
                        }
                    ]
                }
            ]
        },
        "color-block-directive": {
            "begin": "(\\{)",
            "end": "(\\})",
            "name": "color.block.directive.bcss",
            "isBlock": true,
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.punctuation.branket.start.bcss"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "keyword.operator.punctuation.branket.end.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#single-comment"
                },
                {
                    "include": "#custom-property-name-def"
                },
                {
                    "include": "#css-color-value-defs"
                },
                {
                    "include": "#end-instruction"
                }
            ]
        },
        "css-color-value-defs": {
            "begin": "\\s*(:)\\s*",
            "end": "(?=;|\\})",
            "beginCaptures": {
                "0": {
                    "name": "keyword.operator.punctuation.property.definition.bcss",
                    "transform": [
                        "trim",
                        "[$0 ]"
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#hex-color-type"
                },
                {
                    "match": "(#)*\\w+(?=;|}|$)",
                    "name": "invalid.color.definition.bcss markup.underline"
                }
            ]
        },
        "hex-color-type": {
            "patterns": [
                {
                    "include": "#web-known-colors"
                },
                {
                    "include": "#hex-colors"
                }
            ]
        },
        "web-known-colors": {
            "name": "constant.color.web.bcss",
            "className": "color",
            "tokenID": "webcolor",
            "match": "\\b(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|currentcolor|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|transparent|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)\\b"
        },
        "describ-comment": {
            "name": "comment.describ.comment.bcss",
            "begin": "^\\s*#\\s+",
            "end": "\\n|$",
            "patterns": [
                {
                    "match": "(?=\\s*\\n\\s*|$)",
                    "closeParent": {
                        "value": "\n",
                        "type": "error.info",
                        "className": "m-status-class",
                        "tokenID": "single-line"
                    }
                },
                {
                    "match": "([\\w\\-]+)(\\s+[\\w\\-]+)+",
                    "name": "meta.directive.comment.value.bcss",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.directive.name.bcss directive.name.bcss",
                            "className": "describ-name"
                        },
                        "2": {
                            "name": "entity.name.function.directive.value.bcss directive.value.bcss",
                            "className": "describ-value",
                            "transform": [
                                "trim",
                                "[ $0]"
                            ],
                            "patterns": [
                                {
                                    "include": "#value-definition"
                                }
                            ]
                        }
                    }
                }
            ],
            "endCaptures": {
                "0": {
                    "transform": "trim"
                }
            },
            "tokenID": "describ-comment",
            "className": "comment",
            "formattingMode": 1
        },
        "single-comment": {
            "match": "\\/\\/(.+)?$",
            "name": "comment.single-line-comment.bcss",
            "formattingMode": 5,
            "transform": "rtrim"
        },
        "css-value-definition": {
            "name": "value.definition.bcss",
            "patterns": [
                {
                    "name": "keyword.operator.punctuation.operator.property.separator.bcss",
                    "match": ","
                },
                {
                    "include": "#system-block-definition"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#web-litteral-var"
                },
                {
                    "include": "#web-known-colors"
                },
                {
                    "include": "#hex-colors"
                },
                {
                    "include": "#time-constant-unit"
                },
                {
                    "include": "#angle-with-unit"
                },
                {
                    "include": "#frequency-with-unit"
                },
                {
                    "include": "#length-with-unit"
                },
                {
                    "include": "#function-handler-patterns"
                },
                {
                    "include": "#meaning-words"
                }
            ]
        },
        "meaning-words": {
            "tokenID": "meaning",
            "className": "words",
            "comment": "patterns only groups for meanings words",
            "name": "entity.name.constant.meaning.word.bcss",
            "patterns": [
                {
                    "include": "#meaning-a"
                },
                {
                    "include": "#meaning-b"
                },
                {
                    "include": "#meaning-c"
                },
                {
                    "include": "#meaning-d"
                },
                {
                    "include": "#meaning-e"
                },
                {
                    "include": "#meaning-f"
                },
                {
                    "include": "#meaning-g"
                },
                {
                    "include": "#meaning-h"
                },
                {
                    "include": "#meaning-i"
                },
                {
                    "include": "#meaning-j"
                },
                {
                    "include": "#meaning-k"
                },
                {
                    "include": "#meaning-l"
                },
                {
                    "include": "#meaning-m"
                },
                {
                    "include": "#meaning-n"
                },
                {
                    "include": "#meaning-o"
                },
                {
                    "include": "#meaning-p"
                },
                {
                    "include": "#meaning-q"
                },
                {
                    "include": "#meaning-r"
                },
                {
                    "include": "#meaning-s"
                },
                {
                    "include": "#meaning-t"
                },
                {
                    "include": "#meaning-u"
                },
                {
                    "include": "#meaning-v"
                },
                {
                    "include": "#meaning-w"
                },
                {
                    "include": "#meaning-x"
                },
                {
                    "include": "#meaning-y"
                },
                {
                    "include": "#meaning-z"
                },
                {
                    "include": "#meaning-property"
                }
            ]
        },
        "meaning-property": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(static|sans-serif|serif|monospace|emoji|math|cursive|float|auto|relative|absolute|flex|inline-block|inherit|initial|current(c|C)olor)\\b"
        },
        "meaning-a": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(auto|alphabetic|additive)\\b"
        },
        "meaning-b": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(block|both)\\b"
        },
        "meaning-c": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(checkbox|cyclic)\\b"
        },
        "meaning-e": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(ease(-(in|out|inout))?)\\b"
        },
        "meaning-f": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(fixed|false)\\b"
        },
        "meaning-i": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(initial|inherit|inline(-(start|end))?)\\b"
        },
        "meaning-l": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(left)\\b"
        },
        "meaning-v": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(v(isible))\\b"
        },
        "meaning-n": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(none|numeric)\\b"
        },
        "meaning-r": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(revert(-layer)?|right)\\b"
        },
        "meaning-s": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(symbols|symbolic)\\b"
        },
        "meaning-t": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(top|true)\\b"
        },
        "meaning-u": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(unset)\\b"
        },
        "function-handler-patterns": {
            "patterns": [
                {
                    "begin": "\\b(calc)\\b\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.calc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#calc-constant"
                        },
                        {
                            "include": "#css-operators"
                        },
                        {
                            "include": "#value-definition"
                        }
                    ]
                },
                {
                    "begin": "\\b(url)\\b\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.url"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#string"
                        },
                        {
                            "include": "#url-params"
                        }
                    ]
                },
                {
                    "begin": "\\b(format)\\b\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.url"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#string"
                        }
                    ]
                },
                {
                    "include": "#native-css-function"
                }
            ]
        },
        "time-constant-unit": {
            "name": "constant.type.time.bcss",
            "match": "(-|\\+)?((\\d+)?\\.)?\\d+((m)?s)"
        },
        "length-with-unit": {
            "name": "constant.numeric.type.length.bcss",
            "match": "(-)?(((\\d+)?\\.)?\\d+(Q|fr|dpi|dpcm|dppx|x|cm|mm|em|rem|in|pt|ex|ch|cap|ic|lh|r(cap|ch|em|ex|ic|lh)|(d|l|s)?(vh|vw)|vb|vi|vmin|vmax|cq(b|h|i|max|min|w)|%)|\\d+px|\\d+(\\.\\d+)?)",
            "tokenID": "length"
        },
        "angle-with-unit": {
            "name": "constant.numeric.type.angle.bcss",
            "match": "(-)?(((\\d+)?\\.)?\\d+(deg|rad|grad|turn))"
        },
        "frequency-with-unit": {
            "name": "constant.numeric.type.frequency.bcss",
            "match": "(-)?(((\\d+)?\\.)?\\d+((k)?Hz))"
        },
        "url-params": {
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "name": "constant.url.bcss",
                    "match": "(?i)(((ftp|http(s)|[a-z]+)?:(\\/{,2}))|(\\.)|\\s*)[^\\s\\/\\)]+(\\/[^\\s\\/\\)]+)*(\\/)?"
                }
            ]
        },
        "selection-tag-definition-o": {
            "comment": "sect css expression tags",
            "name": "constant.selection.tag.bcss",
            "begin": "((\\>|\\+|~|,)\\s*)?(\\.|\\#)?[\\-\\w]+(\\[.*\\])*(:{1,2}[\\-a-z][a-z0-9\\-]*)*(\\{)?",
            "end": "}",
            "beginCaptures": {},
            "endCaptures": {},
            "patterns": [],
            "isBlock": true
        },
        "calc-constant": {
            "name": "constant.css.calc.bcss",
            "match": "(?i)\\b(NaN|pi|e)\\b"
        },
        "css-operators": {
            "match": "\\s*(\\+|/|-|%|\\*)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.operator.punctuation.operator.bcss"
                }
            }
        },
        "hex-colors": {
            "match": "(?i)\\s*(#([0-9a-f]{8}|[\\da-f]{6}|[\\da-f]{4}|[\\da-f]{3}))\\s*",
            "captures": {
                "1": {
                    "name": "constant.type.hex.color.bcss"
                }
            }
        },
        "string": {
            "patterns": [
                {
                    "include": "#single-quote-string"
                },
                {
                    "include": "#double-quote-string"
                }
            ]
        },
        "single-quote-string": {
            "name": "string.single.quoted.bcss",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "string.escaped.bcss",
                    "match": "\\\\."
                }
            ]
        },
        "double-quote-string": {
            "name": "string.double.quoted.bcss",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "string.escaped.bcss",
                    "match": "\\\\."
                }
            ]
        },
        "global-css-properties": {
            "patterns": [
                {
                    "include": "#css-properties-moz"
                },
                {
                    "include": "#css-properties-webkit"
                },
                {
                    "include": "#css-properties-a"
                },
                {
                    "include": "#css-properties-b"
                },
                {
                    "include": "#css-properties-c"
                },
                {
                    "include": "#css-properties-d"
                },
                {
                    "include": "#css-properties-e"
                },
                {
                    "include": "#css-properties-f"
                },
                {
                    "include": "#css-properties-g"
                },
                {
                    "include": "#css-properties-h"
                },
                {
                    "include": "#css-properties-i"
                },
                {
                    "include": "#css-properties-j"
                },
                {
                    "include": "#css-properties-l"
                },
                {
                    "include": "#css-properties-m"
                },
                {
                    "include": "#css-properties-moz"
                },
                {
                    "include": "#css-properties-o"
                },
                {
                    "include": "#css-properties-p"
                },
                {
                    "include": "#css-properties-q"
                },
                {
                    "include": "#css-properties-r"
                },
                {
                    "include": "#css-properties-s"
                },
                {
                    "include": "#css-properties-t"
                },
                {
                    "include": "#css-properties-u"
                },
                {
                    "include": "#css-properties-v"
                },
                {
                    "include": "#css-properties-w"
                },
                {
                    "include": "#css-properties-webkit"
                },
                {
                    "include": "#css-properties-x"
                },
                {
                    "include": "#css-properties-y"
                },
                {
                    "include": "#css-properties-z"
                }
            ]
        },
        "css-properties-moz": {
            "match": "(-)?moz-\\b(animation(-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function))?|appearance|backface-visibility|border(-(end|end-color|end-style|end-width|image|start|start-color|start-style|start-width))?|box(-(align|direction|flex|ordinal-group|orient|pack|sizing))?|float-edge|font(-(feature-settings|language-override))?|force-broken-image-icon|hyphens|margin(-(end|start))?|orient|osx-font-smoothing|padding(-(end|start))?|perspective-origin|tab-size|text-size-adjust|transform(-(origin|style))?|transition(-(delay|duration|property|timing-function))?|user(-(input|modify|select))?|window-dragging)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-webkit": {
            "match": "(-)?webkit-\\b(align(-(content|content|items|items|self|self))?|animation|animation(-(delay|delay|direction|direction|duration|duration|fill-mode|fill-mode|iteration-count|iteration-count|name|name|play-state|play-state|timing-function|timing-function))?|appearance|appearance|backface(-(visibility|visibility))?|background(-(clip|clip|origin|origin|size|size))?|border(-(bottom-left-radius|bottom-left-radius|bottom-right-radius|bottom-right-radius|image|image|radius|radius|top-left-radius|top-left-radius|top-right-radius|top-right-radius))?|box(-(align|align|direction|direction|flex|flex|ordinal-group|ordinal-group|orient|orient|pack|pack|shadow|shadow|sizing|sizing))?|clip(-(path|path))?|filter|filter|flex|flex(-(basis|basis|direction|direction|flow|flow|grow|grow|shrink|shrink|wrap|wrap))?|justify(-(content|content))?|line(-(clamp|clamp))?|mask|mask(-(clip|clip|composite|composite|image|image|origin|origin|position|position|position-x|position-x|position-y|position-y|repeat|repeat|size|size))?|order|order|perspective|perspective(-(origin|origin))?|text(-(fill-color|fill-color|security|security|size-adjust|size-adjust|stroke|stroke|stroke-color|stroke-color|stroke-width|stroke-width))?|transform|transform(-(origin|origin|style|style))?|transition|transition(-(delay|delay|duration|duration|property|property|timing-function|timing-function))?|user(-(select|select))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-a": {
            "match": "\\b(accent-color|all|animation-composition|aspect-ratio)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-b": {
            "match": "\\b(backdrop-filter|background(-(attachment|blend-mode|color|image|position|position-x|position-y|repeat))?|baseline-source|block-size|border(-(block|block-color|block-end|block-end-color|block-end-style|block-end-width|block-start|block-start-color|block-start-style|block-start-width|block-style|block-width|bottom|bottom-color|bottom-style|bottom-width|collapse|color|end-end-radius|end-start-radius|image-outset|image-repeat|image-slice|image-source|image-width|inline|inline-color|inline-end|inline-end-color|inline-end-style|inline-end-width|inline-start|inline-start-color|inline-start-style|inline-start-width|inline-style|inline-width|left|left-color|left-style|left-width|right|right-color|right-style|right-width|spacing|start-end-radius|start-start-radius|style|top|top-color|top-style|top-width|width))?|bottom|box-decoration-break|break(-(after|before|inside))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-c": {
            "match": "\\b(caption-side|caret-color|clear|clip-rule|color(-(adjust|interpolation|interpolation-filters|scheme))?|column(-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width))?|columns|contain(-(intrinsic-block-size|intrinsic-height|intrinsic-inline-size|intrinsic-size|intrinsic-width))?|container(-(name|type))?|content|counter(-(increment|reset|set))?|css-float|cursor|cx|cy)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-d": {
            "match": "\\b(d|direction|display|dominant-baseline)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-e": {
            "match": "\\b(empty-cells)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-f": {
            "match": "\\b(fill(-(opacity|rule))?|float|flood(-(color|opacity))?|font(-(family|kerning|optical-sizing|palette|size|size-adjust|stretch|style|synthesis|synthesis-position|synthesis-small-caps|synthesis-style|synthesis-weight|variant|variant-alternates|variant-caps|variant-east-asian|variant-ligatures|variant-numeric|variant-position|variation-settings|weight))?|forced-color-adjust)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-g": {
            "match": "\\b(gap|grid(-(area|auto-columns|auto-flow|auto-rows|column|column-end|column-gap|column-start|gap|row|row-end|row-gap|row-start|template|template-areas|template-columns|template-rows))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-h": {
            "match": "\\b(height|hyphenate-character)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-i": {
            "match": "\\b(image(-(orientation|rendering))?|ime-mode|inline-size|inset(-(block|block-end|block-start|inline|inline-end|inline-start))?|isolation)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-j": {
            "match": "\\b(justify(-(items|self))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-l": {
            "match": "\\b(left|letter-spacing|lighting-color|line(-(break|height))?|list(-(style|style-image|style-position|style-type))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-m": {
            "match": "\\b(margin(-(block|block-end|block-start|bottom|inline|inline-end|inline-start|left|right|top))?|marker(-(end|mid|start))?|mask(-(mode|type))?|math(-(depth|style))?|max(-(block-size|height|inline-size|width))?|min(-(block-size|height|inline-size|width))?|mix-blend-mode)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-o": {
            "match": "\\b(object(-(fit|position))?|offset(-(anchor|distance|path|position|rotate))?|opacity|outline(-(color|offset|style|width))?|overflow(-(anchor|block|clip-margin|inline|wrap|x|y))?|overscroll(-(behavior|behavior-block|behavior-inline|behavior-x|behavior-y))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-p": {
            "match": "\\b(padding(-(block|block-end|block-start|bottom|inline|inline-end|inline-start|left|right|top))?|page(-(break-after|break-before|break-inside))?|paint-order|place(-(content|items|self))?|pointer-events|position|print-color-adjust)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-q": {
            "match": "\\b(quotes)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-r": {
            "match": "\\b(r|resize|right|rotate|row-gap|ruby(-(align|position))?|rx|ry)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-s": {
            "match": "\\b(scale|scroll(-(behavior|margin|margin-block|margin-block-end|margin-block-start|margin-bottom|margin-inline|margin-inline-end|margin-inline-start|margin-left|margin-right|margin-top|padding|padding-block|padding-block-end|padding-block-start|padding-bottom|padding-inline|padding-inline-end|padding-inline-start|padding-left|padding-right|padding-top|snap-align|snap-stop|snap-type))?|scrollbar(-(color|gutter|width))?|shape(-(image-threshold|margin|outside|rendering))?|stop(-(color|opacity))?|stroke(-(dasharray|dashoffset|linecap|linejoin|miterlimit|opacity|width))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-t": {
            "match": "\\b(table-layout|text(-(align|align-last|anchor|combine-upright|decoration|decoration-color|decoration-line|decoration-skip-ink|decoration-style|decoration-thickness|emphasis|emphasis-color|emphasis-position|emphasis-style|indent|justify|orientation|overflow|rendering|shadow|transform|underline-offset|underline-position|wrap|wrap-mode|wrap-style))?|top|touch-action|transform-box|translate)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-u": {
            "match": "\\b(unicode-bidi)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-v": {
            "match": "\\b(vector-effect|vertical-align|visibility)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-w": {
            "match": "\\b(white(-(space|space-collapse))?|width|will-change|word(-(break|spacing|wrap))?|writing-mode)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-x": {
            "match": "\\b(x)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-y": {
            "match": "\\b(y)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-z": {
            "match": "\\b(z-index)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "selector-detection": {
            "patterns": [
                {
                    "include": "#global-css-properties"
                },
                {
                    "include": "#meta-properties-selector"
                },
                {
                    "begin": "\\s*:\\s*",
                    "end": "(;|(?=\\}))",
                    "endMissingValue": ";",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.punctuation.property.value.bcss",
                            "transform": [
                                "trim",
                                "[$0 ]"
                            ]
                        }
                    },
                    "patterns": [
                        {
                            "include": "#css-value-definition---d"
                        }
                    ],
                    "formattingMode": 1
                }
            ]
        },
        "meta-properties-selector": {
            "comment": "start css selector",
            "begin": "\\*|(?:#|\\.|\\-\\-)?[a-zA-Z][a-zA-Z0-9\\-_]*\\b",
            "end": "\\}|;",
            "endMissingValue": "",
            "beginCaptures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#global-css-properties"
                        },
                        {
                            "include": "#class-id-selector"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#operator-split"
                },
                {
                    "include": "#bcss-inline-operator-selector"
                },
                {
                    "include": "#css-event-property"
                },
                {
                    "include": "#speudo-classes"
                },
                {
                    "comment": "on startLine - just append single line operator",
                    "startLine": true,
                    "match": "\\s*(\\*|(?:#|\\.|\\-\\-)?[a-zA-Z][a-zA-Z0-9\\-_]*\\b)",
                    "transform": [
                        "trim",
                        "[ $0]"
                    ],
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#class-id-selector"
                                }
                            ]
                        }
                    }
                },
                {
                    "include": "#class-id-selector"
                }
            ]
        },
        "operator-split": {
            "patterns": [
                {
                    "match": "\\s*(,)(?=[^\\s])",
                    "transform": [
                        "trim",
                        "[$0 ]"
                    ],
                    "transformMatch": "(,)\\s*",
                    "captures": {
                        "1": {
                            "name": "puncution.operator.selector.split.bcss"
                        }
                    }
                },
                {
                    "match": "\\s*(,)\\s*",
                    "transform": [
                        "trim",
                        "[$0 ]"
                    ],
                    "captures": {
                        "1": {
                            "name": "puncution.operator.selector.split.bcss"
                        }
                    }
                }
            ]
        },
        "bcss-inline-operator-selector": {
            "patterns": [
                {
                    "match": "\\s*(>|\\+|~|,)\\s*(?=\\*|[a-z#\\.])",
                    "transform": [
                        "trim",
                        "[ $0]"
                    ],
                    "transformMatch": "\\s+(>|\\+|~|,)",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.punctuation.operator.bcss operator.join.bcss"
                        }
                    }
                }
                ,
                {  
                    "match": "\\s*(>|\\+|~|,)\\s*",
                    "comment":"glue with white space",
                    "transform": [
                        "trim",
                        "[ $0]"
                    ]
                }
            ]
        },
        "css-event-property": {
            "match": "\\\\:[\\w\\-]+",
            "name": "string.event.property.bcss"
        },
        "next-tag-selector": {
            "match": "(\\s*)(\\*|(?:\\.|#)?[a-zA-Z][a-zA-Z0-9_\\-]*)",
            "comment": "no after punction operator - prepend extra space to join selector",
            "name": "sub-tag.selector.bcss",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "match": "\\s+",
                            "replaceWith": " "
                        }
                    ]
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#class-id-selector"
                        }
                    ]
                }
            }
        },
        
        "array-attributes": {
            "begin": "\\[",
            "end": "\\]",
            "name": "array.block.bcss",
            "beginCaptures": {
                "0": {
                    "name": "keyword.operator.punctuation.attribute.start.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.punctuation.attribute.end.bcss"
                }
            },
            "patterns": [
                {
                    "match": "\\s+",
                    "transform": "trim",
                    "comment": "skipt array attribute"
                },
                {
                    "include": "#string"
                },
                {
                    "begin": "\\s*(?=((?:\\^|\\$|~|\\*|\\|)?=))",
                    "end": "(?=\\])",
                    "patterns": [
                        {
                            "name": "keyword.operator.punctuation.array.attribute.operator",
                            "match": "\\s*((?:\\^|\\$|~|\\*|\\|)?=)\\s*",
                            "transform": [
                                "trim",
                                "[$0]"
                            ]
                        },
                        {
                            "include": "#string"
                        },
                        {
                            "match": "\\b(i|I|s|S)\\b",
                            "name": "constant.flag.attribute.bcss"
                        }
                    ]
                }
            ]
        },
        "speudo-func-attributes": {
            "begin": "\\(",
            "end": "\\)",
            "name": "func.block.bcss"
        },
        "speudo-classes": {
            "name": "keyword.control.speudo.class.bcss",
            "end": "\\s*(?=\\s[\\w\\*\\+~])|\\s+($)?|(?=\\+|:|~|,)",
            "begin": "((?:\\:)?:)(active|any-link|autofill|blank|checked|current|default|defined|dir|disabled|empty|enabled|first|first-child|first-of-type|focus|focus-visible|focus-within|fullscreen|future|has|host|host|host-context|hover|indeterminate|in-range|invalid|is|lang|last-child|last-of-type|left|link|local-link|modal|not|nth-child|nth-last-child|nth-last-of-type|nth-of-type|only-child|only-of-type|optional|out-of-range|past|paused|picture-in-picture|placeholder-shown|playing|read-only|read-write|required|right|root|scope|state|target|target-within|user-invalid|valid|visited|where)\\b",
            "endCaptures": {
                "0": {
                    "patterns": [
                        {
                            "match": "\\s+$",
                            "replaceWith": "",
                            "comment": "end line - remove trailing space"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "name": "next.function.definition.bcss"
                },
                {
                    "begin": "\\[",
                    "end": "\\]",
                    "name": "next.array.definition.bcss"
                },
                {
                    "include": "#speudo-classes"
                }
            ]
        },
        "page-rule": {
            "begin": "\\s*@\\b(page)\\b",
            "end": "$",
            "name": "meta.global.directive.bcss",
            "patterns": [
                {
                    "name": "constant.selector.bcss",
                    "match": ":\\b(first|left|right)\\b"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "list-rule": {
            "begin": "\\s*@\\b(list)\\b",
            "end": "$",
            "name": "meta.global.directive.bcss",
            "patterns": [
                {
                    "begin": "\\[",
                    "end": "\\]",
                    "name": "constant.list.array.bcss",
                    "patterns": [
                        {
                            "include": "#value-definition"
                        },
                        {
                            "match": ",",
                            "name": "keyword.operator.punctuation.separator.bcss"
                        }
                    ]
                },
                {
                    "include": "#list-block-capture"
                }
            ]
        },
        "list-block-capture": {
            "begin": "\\{",
            "end": "\\}",
            "name": "meta.block.capture.bcss",
            "endCaptures": {
                "0": {
                    "name": "meta.block.end.capture.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#list-selector-class"
                },
                {
                    "include": "#inside-block"
                }
            ],
            "isBlock": true
        },
        "list-selector-class": {
            "match": "\\s*\\.[\\w\\-%]+(\\\\%[\\w\\-%]+)*",
            "name": "entity.name.class.native.css.type.class.bcss"
        },
        "supports-rule": {
            "begin": "\\s*(@\\b(supports)\\b)",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.bcss"
                }
            },
            "patterns": [
                {
                    "name": "operator.property.separator.bcss",
                    "match": "\\s*\\b(and|or)\\b\\s*"
                },
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "name": "constant.property.name.bcss",
                            "match": "[\\w\\-]+"
                        },
                        {
                            "begin": "\\s*(:)\\s*",
                            "end": "(?=\\))",
                            "beginCaptures": {
                                "1": {
                                    "name": "property.css.punctuation.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#value-definition"
                                }
                            ]
                        }
                    ]
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "keyframes-rule": {
            "begin": "\\s*(@\\b(keyframes))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.keyframes.bcss"
                }
            },
            "patterns": [
                {
                    "name": "constant.keyframe.name.bcss",
                    "match": "\\b([\\w\\-_]+)\\b"
                },
                {
                    "include": "#block-capture-keyframes"
                }
            ]
        },
        "font-face-rule": {
            "begin": "\\s*(@\\b(font-face))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.fontface.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#block-capture"
                }
            ]
        },
        "color-profile-rule": {
            "begin": "\\s*(@\\b(color-profile))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.color.profile.bcss"
                }
            },
            "patterns": [
                {
                    "match": "\\b([\\w\\-]+)",
                    "name": "constant.property.name.bcss"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "container-rule": {
            "begin": "\\s*(@\\b(container))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.container.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#inside-block-conditional"
                },
                {
                    "include": "#condition-block"
                },
                {
                    "match": "\\b([\\w\\-]+)\\b\\s*",
                    "captures": {
                        "1": {
                            "name": "constant.property.name.container.bcss"
                        }
                    }
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "media-rule": {
            "begin": "\\s*(@\\b(media))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.media.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#inside-block-conditional"
                },
                {
                    "include": "#media-constant-operator"
                },
                {
                    "include": "#condition-operator-litteral"
                },
                {
                    "include": "#condition-block"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "charset-rule": {
            "begin": "\\s*(@\\b(charset))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                }
            ]
        },
        "document-rule": {
            "begin": "\\s*(@\\b(document))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "match": ","
                },
                {
                    "begin": "\\b(url(-prefix)?|domain|regexp)\\b",
                    "end": "(?=,|{)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.bcss"
                        }
                    },
                    "patterns": [
                        {
                            "begin": "\\(",
                            "end": "\\)",
                            "patterns": [
                                {
                                    "include": "#string"
                                },
                                {
                                    "include": "#url-params"
                                }
                            ]
                        },
                        {
                            "include": "#block-capture"
                        }
                    ]
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "namespace-rule": {
            "begin": "\\s*(@\\b(namespace))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                }
            ]
        },
        "counter-style-rule": {
            "begin": "\\s*(@\\b(counter-style))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.counter.style.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#css-name"
                },
                {
                    "include": "#counter-style-block-capture"
                }
            ]
        },
        "counter-style-block-capture": {
            "patterns": [
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "name": "meta.block.counter.style.block.bcss",
                    "patterns": [
                        {
                            "begin": "\\b(system|speak-as|pad|range|suffix|prefix|negative|additive-symbols|symbol)\\b",
                            "end": ";|$|(?=\\})",
                            "beginCaptures": {
                                "1": {
                                    "name": "constant.counter.style.property.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#match-value-definition"
                                }
                            ]
                        },
                        {
                            "include": "#property-definition"
                        }
                    ]
                }
            ]
        },
        "css-rules": {
            "patterns": [
                {
                    "include": "#page-rule"
                },
                {
                    "include": "#list-rule"
                },
                {
                    "include": "#list-block-capture"
                },
                {
                    "include": "#supports-rule"
                },
                {
                    "include": "#keyframes-rule"
                },
                {
                    "include": "#font-face-rule"
                },
                {
                    "include": "#color-profile-rule"
                },
                {
                    "include": "#container-rule"
                },
                {
                    "include": "#media-rule"
                },
                {
                    "include": "#charset-rule"
                },
                {
                    "include": "#document-rule"
                },
                {
                    "include": "#namespace-rule"
                },
                {
                    "include": "#counter-style-rule"
                },
                {
                    "include": "#counter-style-block-capture"
                }
            ]
        },
        "region-block": {
            "begin": "(#@region)[ ](.+)$",
            "end": "(#@endregion\\b)$",
            "name": "region.block.bcss",
            "patterns": [
                {
                    "include": "#root-definition"
                },
                {
                    "include": "#region-block"
                }
            ],
            "beginFormattingMode": 1,
            "endFormattingMode": 1,
            "beginCaptures": {
                "0": {
                    "name": "comment.region.start",
                    "patterns": [
                        {
                            "match": ".+",
                            "formattingMode": 1
                        }
                    ]
                }
            },
            "endCaptures": {
                "0": {
                    "name": "comment.region.end.bcss"
                }
            }
        },
        "root-definition": {
            "patterns": [
                {
                    "include": "#single-line-comment"
                },
                {
                    "include": "#describ-comment"
                },
                {
                    "include": "#single-comment"
                },
                {
                    "include": "#skip-multispace"
                },
                {
                    "include": "#bcss-root-directives"
                },
                {
                    "include": "#bcss-property-value"
                },
                {
                    "match": "((?:\\-*)\\b[a-zA-Z][a-zA-Z\\-_]*)(\\s*:)(\\s|$)",
                    "name": "property-define"
                },
                {
                    "include": "#meta-properties-selector"
                },
                {
                    "include": "#global-directive-import"
                }
            ]
        },
        "global-directive-import": {
            "begin": "\\s*@\\b(import|apply|global)\\b",
            "end": ";|$",
            "name": "meta.global.directive.bcss",
            "formattingMode": 1,
            "beginCaptures": {
                "0": {
                    "name": "keyword.control.global.directive.bcss directive.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#end-instruction"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#bcss-directive-uri-definition"
                }
            ]
        },
        "bcss-directive-uri-definition": {
            "patterns": [
                {
                    "include": "#url"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#value-import-url-definition"
                }
            ]
        },
        "bcss-inline-directive": {
            "begin": "(@\\b(?:apply|import))\\b",
            "end": ";|(?=\\})",
            "name": "inline.directive.bcss",
            "endMissingValue": "",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.inline.directive.bcss directive.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#end-instruction"
                        }
                    ]
                }
            },
            "formattingMode": 1,
            "patterns": [
                {
                    "include": "#bcss-glue-white-space"
                },
                {
                    "include": "#bcss-directive-uri-definition"
                }
            ]
        },
        "bcss-property-value": {
            "begin": "((?:\\-*)\\b[a-zA-Z][a-zA-Z\\-_]*)\\s*",
            "end": "(?=:)",
            "name": "property.value:",
            "beginCaptures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#global-css-properties"
                        },
                        {
                            "match": ".+",
                            "name": "custom.properties"
                        }
                    ]
                }
            }
        },
        "bcss-selection-definition": {
            "patterns": [
                {
                    "include": "#capture-speudo-selector"
                },
                {
                    "include": "#array-attributes"
                },
                {
                    "include": "#bcss-inline-operator-selector"
                },
                {
                    "include": "#operator-split"
                },
                {
                    "include": "#bcss-media-block"
                },
                {
                    "include": "#bcss-glue-selector-white-space"
                },
                {
                    "begin": "\\:",
                    "end": ";|\\{|\\}",
                    "name": "invalid.data",
                    "isInstructionSeparator":true
                }
            ]
        },
        "capture-speudo-selector": {
            "begin": "(?:(?::)?:)\\b(active|any-link|autofill|blank|checked|current|default|defined|dir|disabled|empty|enabled|first|first-child|first-of-type|focus|focus-visible|focus-within|fullscreen|future|has|host|host|host-context|hover|indeterminate|in-range|invalid|is|lang|last-child|last-of-type|left|link|local-link|modal|not|nth-child|nth-last-child|nth-last-of-type|nth-of-type|only-child|only-of-type|optional|out-of-range|past|paused|picture-in-picture|placeholder-shown|playing|read-only|read-write|required|right|root|scope|state|target|target-within|user-invalid|valid|visited|where)\\b",
            "end": "(?=\\})|(?<=\\}|\\{)",
            "debugName": "_debug_capture.speudo.definition",
            "patterns": [
                {
                    "include": "#bcss-sub-selection-definition"
                }
            ],
            "beginCaptures": {
                "0": {
                    "name": "keyword.control.speudo.class.bcss"
                }
            }
        },
        "bcss-root-directives": {
            "patterns": [
                {
                    "include": "#media-directive"
                },
                {
                    "include": "#root-directive"
                },
                {
                    "include": "#color-directive"
                },
                {
                    "include": "#css-rules"
                }
            ]
        },
        "bcss-media-block": {
            "begin": "(\\{)",
            "end": "(\\})",
            "isBlock": true,
            "name": "meta.global.block.bcss",
            "comment": "block for css style definition",
            "patterns": [
                {
                    "include": "#bcss-media-block-properties"
                }
            ],
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.punctuation.branket.start.bcss"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "keyword.operator.punctuation.branket.end.bcss"
                }
            }
        },
        "bcss-root-entry-properties": {
            "begin": "(?=(\\*|(\\.|#|-*)?[a-zA-Z][a-zA-Z-\\_]*))",
            "end": "(?=;|\\}|\\{)",
            "endMissingValue": "",
            "formattingMode": 4,
            "name": "root-properties",
            "comment": "definition of core root properties",
            "patterns": [
                {
                    "include": "#capture-speudo-selector"
                },
                {
                    "begin": "(?=\\s*(\\+|>|~|,)\\s*)",
                    "end": "(?=\\s|\\w)",
                    "name": "try.select.operator",
                    "patterns": [
                        {
                            "include": "#bcss-inline-operator-selector"
                        },
                        {
                            "match": "\\s*$",
                            "replaceWith": "",
                            "name": "skip.operator.wp.bcss"
                        }
                    ]
                },
                {
                    "begin": "(?=\\[)",
                    "end": "(?<=\\])",
                    "patterns": [
                        {
                            "include": "#bcss-selection-definition"
                        }
                    ]
                },
                {
                    "begin": "(?=\\.|#)",
                    "end": "(?<=\\}|\\{)",
                    "name": "start-sub",
                    "patterns": [
                        {
                            "include": "#bcss-selector-def"
                        },
                        {
                            "include": "#bcss-selection-definition"
                        }
                    ]
                },
                {
                    "include": "#css-value-defs"
                },
                {
                    "include": "#global-css-properties"
                },
                {
                    "begin": "(?=-+[a-zA-Z][a-zA-Z0-9\\-_]*)",
                    "end": "(?=:|;)",
                    "patterns": [
                        {
                            "comment": "for custom property expected custom property",
                            "begin": "\\{",
                            "end": "(?=\\})",
                            "name": "invalid.custom.property"
                        },
                        {
                            "include": "#bcss-custom-property"
                        }
                    ]
                }, 
                {
                    "include": "#bcss-selector-def"
                },
                {
                    "include": "#end-instruction"
                }
            ]
        },
        "bcss-custom-property": {
            "match": "-+[a-zA-Z][a-zA-Z0-9\\-_]*",
            "name": "support.type.property-name.property.bcss custom.property.bcss"
        },
        "bcss-skip-glue-whitespace": {
            "match": "\\s+($)?",
            "replaceWith": "",
            "isGlueValue": ""
        },
        "bcss-detect-sub-class-id-selector": {
            "begin": "(?=\\s*(-*|\\.|#)?[a-zA-Z][a-zA-Z0-9\\-_])",
            "end": "(?= |\\*|>|:|;|\\[|\\(|\\{|\\})",
            "name": "subcaptuyre",
            "patterns": [
                {
                    "include": "#class-id-selector"
                }
            ]
        },
        "bcss-selector-def": {
            "patterns": [
                {
                    "include": "#bcss-invalid-selector-trailing"
                },
                {
                    "begin": "(?=(?:\\.|#)?[a-zA-Z][a-zA-Z0-9_]*)",
                    "end": "(?=\\s|:|\\+|>|~|$)",
                    "patterns": [
                        {
                            "comment": "expected selection on tag or class identifier",
                            "begin": "(#|\\.)(?:(\\s*$|([a-zA-Z][a-zA-Z0-9_\\-]*(?:\\\\.[a-zA-Z][a-zA-Z0-9_\\-]*)*)))",
                            "end": "(?=\\s|:|\\+|>|~|$)",
                            "beginCaptures": {
                                "0": {
                                    "patterns": [
                                        {
                                            "include": "#bcss-id-class-selector-match"
                                        }
                                    ]
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#bcss-invalid-selector-trailing"
                                },
                                {
                                    "include": "#bcss-id-class-selector-match"
                                },
                                {
                                    "include": "#bcss-selection-definition"
                                }
                            ]
                        },
                        {
                            "match": "(#|\\.)?(?:(\\s*$|([a-zA-Z][a-zA-Z0-9_\\-]*(?:\\\\.[a-zA-Z][a-zA-Z0-9_\\-]*)*)))",
                            "captures": {
                                "0": {
                                    "patterns": [
                                        {
                                            "include": "#bcss-invalid-selector-trailing"
                                        },
                                        {
                                            "include": "#bcss-id-class-selector-match"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "match": "\\\\.",
                            "name": "global.escape"
                        },
                        {
                            "include": "#bcss-invalid-selector-trailing"
                        }
                    ]
                }
            ]
        },
        "bcss-id-class-selector-match": {
            "patterns": [
                {
                    "match": "\\.([a-zA-Z][a-zA-Z0-9_\\-]*(?:\\\\.[a-zA-Z][a-zA-Z0-9_\\-]*)*)",
                    "name": "entity.name.function.class.bcss class.bcss"
                },
                {
                    "match": "\\#([a-zA-Z][a-zA-Z0-9_\\-]*(?:\\\\.[a-zA-Z][a-zA-Z0-9_\\-]*)*)",
                    "name": "entity.name.type.identifier.bcss identifier.bcss"
                },
                {
                    "match": "([a-zA-Z][a-zA-Z0-9_\\-]*(?:\\\\.[a-zA-Z][a-zA-Z0-9_\\-]*)*)",
                    "name": "entity.name.tag.bcss tag.bcss"
                }
            ]
        },
        "bcss-invalid-selector-trailing": {
            "match": "(\\.|#)\\s*$",
            "name": "invalid.trailing.end.definition.bcss"
        },
        "bcss-custom-property-definition-patterns": {
            "patterns": [
                {
                    "match": "(?=:)",
                    "comment": "skip : for value definition on end"
                },
                {
                    "include": "#bcss-class-or-id-selector"
                },
                {
                    "include": "#bcss-selection-definition"
                }
            ]
        },
        "bcss-class-or-id-selector": {
            "begin": "(?=\\.|#)",
            "end": "(?<=\\})",
            "patterns": [
                {
                    "include": "#bcss-selector-def"
                },
                {
                    "include": "#bcss-selection-definition"
                }
            ]
        },
        "bcss-sub-property-entry-definition": {
            "patterns": [
                {
                    "begin": "(?=(.|#)?[a-zA-Z][a-zA-Z]*)",
                    "end": "(?<=\\}|;)",
                    "contentName": "sub-property-entry",
                    "patterns": [
                        {
                            "begin": "((.|#)?[a-zA-Z][a-zA-Z]*)(\\\\[a-z][a-z0-9]*)*",
                            "end": "(?<=\\}|;)",
                            "beginCaptures": {
                                "0": {
                                    "patterns": [
                                        {
                                            "include": "#bcss-sub-html5-tag-definition"
                                        },
                                        {
                                            "include": "#bcss-class-or-id-selector"
                                        }
                                    ]
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#bcss-sub-html5-tag-definition"
                                },
                                {
                                    "include": "#bcss-class-or-id-selector"
                                },
                                {
                                    "include": "#bcss-selection-definition"
                                }
                            ]
                        },
                        {
                            "include": "#bcss-selection-definition"
                        }
                    ]
                }
            ]
        },
        "bcss-sub-html5-tag-definition": {
            "patterns": [
                {
                    "comment": "detect sub  html5 start tag. Must use {} definition",
                    "match": "\\b(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase|asefont|di|do|ig|lockquote|ody|r|utton)?|c(anvas|aption|enter|ite|ode|ol|olgroup)|d(ata|atalist|d|el|etails|fn|ialog|ir|iv|l|t)|e(m|mbed)|f(ieldset|igcaption|igure|ont|ooter|orm|rame|rameset)|h(ead|eader|group|1|2|3|4|5|6|r|tml)|i(frame|mg|nput|ns)?|k(bd|eygen)|l(abel|egend|i|ink)|m(ain|ap|ark|enu|enuitem|eta|eter)|n(av|oframes|oscript)|o(bject|l|ptgroup|ption|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)?|t(able|body|d|emplate|extarea|foot|h|head|ime|itle|r|rack|t)|u(l)?|v(ar|ideo)|w(br))\\b[a-zA-Z\\-]+",
                    "transform":[
                        "[ $0]"
                    ],
                    "transformMatch":"\\s(.+)",
                    "captures": {
                        "0": {
                            "name": "entity.name.tag.custom-tag.or.property.bcss custom-tag.or.property.start.bcss sub"
                        }
                    }
                },
                {
                    "match": "\\b(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase|asefont|di|do|ig|lockquote|ody|r|utton)?|c(anvas|aption|enter|ite|ode|ol|olgroup)|d(ata|atalist|d|el|etails|fn|ialog|ir|iv|l|t)|e(m|mbed)|f(ieldset|igcaption|igure|ont|ooter|orm|rame|rameset)|h(ead|eader|group|1|2|3|4|5|6|r|tml)|i(frame|mg|nput|ns)?|k(bd|eygen)|l(abel|egend|i|ink)|m(ain|ap|ark|enu|enuitem|eta|eter)|n(av|oframes|oscript)|o(bject|l|ptgroup|ption|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)?|t(able|body|d|emplate|extarea|foot|h|head|ime|itle|r|rack|t)|u(l)?|v(ar|ideo)|w(br))\\b",
                    "comment":"match sub html5 start tag.",
                    "transform":[
                        "[ $0]"
                    ],
                    "transformMatch":"\\s(.+)",
                    "captures": {
                        "0": {
                            "name": "entity.name.tag.html5-tag.bcss sub"
                        }
                    }
                }
            ]
        },
        "bcss-sub-selection-definition":{
            "patterns":[
                {
                    "include": "#bcss-selection-definition"
                },
                {
                    "include": "#bcss-sub-property-entry-definition"
                }
            ]
        },
        "bcss-media-block-properties": {
            "patterns": [
                {
                    "include": "#single-comment"
                },
                {
                    "include": "#bcss-inline-directive"
                },
                {
                    "include": "#bcss-media-block"
                },
                {
                    "match": "\\\\.+$",
                    "name": "invalid.properties"
                },
                {
                    "begin": "(?=\\[)",
                    "end": "(?=:)|(?<=\\}|;|\\])",
                    "patterns": [
                        {
                            "include": "#array-attributes"
                        },
                        {
                            "include": "#bcss-selection-definition"
                        }
                    ]
                },
                {
                    "comment": "detect html5 start tag. Must use {} definition",
                    "begin": "(?=\\b(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase|asefont|di|do|ig|lockquote|ody|r|utton)?|c(anvas|aption|enter|ite|ode|ol|olgroup)|d(ata|atalist|d|el|etails|fn|ialog|ir|iv|l|t)|e(m|mbed)|f(ieldset|igcaption|igure|ont|ooter|orm|rame|rameset)|h(ead|eader|group|1|2|3|4|5|6|r|tml)|i(frame|mg|nput|ns)?|k(bd|eygen)|l(abel|egend|i|ink)|m(ain|ap|ark|enu|enuitem|eta|eter)|n(av|oframes|oscript)|o(bject|l|ptgroup|ption|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)?|t(able|body|d|emplate|extarea|foot|h|head|ime|itle|r|rack|t)|u(l)?|v(ar|ideo)|w(br))\\b(?:[a-zA-Z\\-]*)?)",
                    "end": "(?<=\\}|;)",
                    "patterns": [
                        {
                            "begin": "\\b(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase|asefont|di|do|ig|lockquote|ody|r|utton)?|c(anvas|aption|enter|ite|ode|ol|olgroup)|d(ata|atalist|d|el|etails|fn|ialog|ir|iv|l|t)|e(m|mbed)|f(ieldset|igcaption|igure|ont|ooter|orm|rame|rameset)|h(ead|eader|group|1|2|3|4|5|6|r|tml)|i(frame|mg|nput|ns)?|k(bd|eygen)|l(abel|egend|i|ink)|m(ain|ap|ark|enu|enuitem|eta|eter)|n(av|oframes|oscript)|o(bject|l|ptgroup|ption|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)?|t(able|body|d|emplate|extarea|foot|h|head|ime|itle|r|rack|t)|u(l)?|v(ar|ideo)|w(br))\\b[a-zA-Z\\-]+",
                            "end": "(?=:)|(?<=\\}|;)",
                            "beginCaptures": {
                                "0": {
                                    "name": "entity.name.tag.custom-tag.or.property.bcss custom-tag.or.property.start.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#bcss-custom-property-definition-patterns"
                                },
                                {
                                    "include": "#bcss-sub-selection-definition"
                                } 
                            ]
                        },
                        {
                            "begin": "\\b(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase|asefont|di|do|ig|lockquote|ody|r|utton)?|c(anvas|aption|enter|ite|ode|ol|olgroup)|d(ata|atalist|d|el|etails|fn|ialog|ir|iv|l|t)|e(m|mbed)|f(ieldset|igcaption|igure|ont|ooter|orm|rame|rameset)|h(ead|eader|group|1|2|3|4|5|6|r|tml)|i(frame|mg|nput|ns)?|k(bd|eygen)|l(abel|egend|i|ink)|m(ain|ap|ark|enu|enuitem|eta|eter)|n(av|oframes|oscript)|o(bject|l|ptgroup|ption|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)?|t(able|body|d|emplate|extarea|foot|h|head|ime|itle|r|rack|t)|u(l)?|v(ar|ideo)|w(br))\\b",
                            "end": "(?<=;|\\})",
                            "beginCaptures": {
                                "0": {
                                    "name": "entity.name.tag.html5-tag.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#bcss-selection-definition"
                                },
                                {
                                    "include": "#bcss-sub-selection-definition"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(?=\\b([a-zA-Z0-9\\-][a-zA-Z0-9\\-]*)\\b)",
                    "end": "(?=:)|(?<=\\}|;)",
                    "comment": "match custom properties",
                    "patterns": [
                        {
                            "begin": "\\b([a-zA-Z0-9\\-][a-zA-Z0-9\\-]*)\\b",
                            "end": "(?=:)|(?<=\\}|;)",
                            "beginCaptures": {
                                "0": {
                                    "name": "entity.name.tag.custom-tag.or.property.bcss custom-tag.or.property.start.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#bcss-sub-property-entry-definition"
                                },
                                {
                                    "include": "#bcss-custom-property-definition-patterns"
                                },
                                {
                                    "include": "#bcss-selection-definition"
                                }
                            ]
                        }
                    ]
                },
                {
                    "include": "#css-value-defs"
                },
                {
                    "include":"#end-instruction"
                }
                

            ]
        }
    },
    "patterns": [
        {
            "include": "#region-block"
        },
        {
            "include": "#root-definition"
        },
        {
            "include": "#bcss-media-block-properties"
        }
    ]
}