{
    "scopeName": "source.bcss",
    "comment": "balafon .bcss formatter",
    "$schema": "https://igkdev.com/schemas/btm-syntax.json",
    "repository": {
        "skip-multispace": {
            "name": "meta.join.multispace.bcss",
            "match": "\\s+",
            "replaceWith": " "
        },
        "global-definition-content": {
            "name": "global-litteral-def-content",
            "patterns": [
                {
                    "name": "variable.language.custom.property.bcss",
                    "match": "(?:\\-)+[a-z0-9\\-]+"
                },
                {
                    "include": "#selector-detection"
                },
                {
                    "match": "\\b([\\w]+)\\b\\s*",
                    "name": "word",
                    "transform": [
                        "trim",
                        "[$0]"
                    ]
                },
                {
                    "include": "#string"
                },
                {
                    "begin": "\\s*(:)\\s*",
                    "end": "(?=;|})",
                    "name": "punction-global-def-1",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.punctuation.property.definition.bcss",
                            "transform": [
                                "trim",
                                "[$0 ]"
                            ]
                        }
                    },
                    "patterns": [
                        {
                            "include": "#css-value-definition"
                        }
                    ]
                },
                {
                    "include": "#single-comment"
                },
                {
                    "include": "#skip-multispace"
                },
                {
                    "include": "#end-instruction"
                }
            ]
        },
        "end-instruction": {
            "name": "keyword.operator.punctuation.end.instruction.bcss",
            "match": "\\s*(;)\\s*",
            "transform": [
                "trim"
            ],
            "isInstructionSeparator": true,
            "formattingMode": 1
        },
        "root-directive": {
            "begin": "(?=\\s*(@\\b(?:root))\\b)",
            "end": "(?<=\\})",
            "patterns": [
                {
                    "begin": "(@root)",
                    "end": "(?<=\\})",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.root.directive.bcss root.directive.bcss",
                            "className": "directive"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#property-only-definition-block"
                        }
                    ]
                }
            ]
        },
        "media-directive": {
            "begin": "(?=\\s*(@\\b(?:def|(x(x)?)?(sm|lg)(-screen)?))\\b)",
            "end": "(?<=\\})",
            "patterns": [
                {
                    "match": "\\s*(@\\b(?:def|(x(x)?)?(sm|lg)(-screen)?))\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.control.media.directive.bcss media.directive.bcss",
                            "className": "directive"
                        }
                    }
                },
                {
                    "include": "#bcss-media-block"
                }
            ]
        },
        "css-value-defs": {
            "begin": "\\s*(:)\\s*",
            "end": "(?=;|})",
            "contentName": "value.definition.inner.bcss",
            "name": "marker.inner.content.bcss",
            "beginCaptures": {
                "0": {
                    "name": "keyword.operator.punctuation.property.definition.bcss",
                    "transform": [
                        "trim",
                        "[$0 ]"
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#css-value-definition"
                },
                {
                    "include": "#skip-multispace"
                }
            ]
        },
        "property-only-definition-block": {
            "begin": "(\\{)",
            "end": "(\\})",
            "name": "property.only.block",
            "isBlock": true,
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.punctuation.branket.start.bcss"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "keyword.operator.punctuation.branket.end.bcss"
                }
            },
            "patterns": [
                {
                    "match": "(-)+\\s*$",
                    "name": "invalid.property.definition",
                    "formattingMode": 1
                },
                {
                    "include": "#single-comment"
                },
                {
                    "include": "#custom-property-name-def"
                },
                {
                    "include": "#css-value-defs"
                },
                {
                    "include": "#end-instruction"
                }
            ]
        },
        "custom-property-name-def": {
            "match": "(\\-*)?\\b[a-zA-Z]+([a-zA-Z0-9\\-]+)?\\b(-)*",
            "name": "support.type.property-name.custom.property.bcss"
        },
        "bcss-glue-white-space": {
            "match": "\\s+|$",
            "name": "glue.skip.white-space.bcss",
            "isGlueValue": " ",
            "replaceWith": " "
        },
        "bcss-glue-selector-white-space": {
            "match": "(\\s+)",
            "name": "glue.skip.selector.white-space.bcss",
            "replaceWith": "",
            "isGlueValue": " "
        },
        "color-directive": {
            "begin": "(?=\\s*(@\\b(?:colors))\\b)",
            "end": "(?=\\})",
            "patterns": [
                {
                    "begin": "\\s*(@\\b(?:colors))\\b",
                    "end": "(?=\\})",
                    "beginCaptures": {
                        "1": {
                            "className": "directive",
                            "name": "keyword.control.color.directive.bcss color.directive.bcss"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#bcss-glue-white-space"
                        },
                        {
                            "begin": "\\b(light|dark)\\b",
                            "end": "(?<=\\})",
                            "beginCaptures": {
                                "1": {
                                    "name": "variable.other.event.constant.directive.theme.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#color-block-directive"
                                },
                                {
                                    "match": "\\s+",
                                    "replaceWith": ""
                                }
                            ]
                        },
                        {
                            "include": "#color-block-directive"
                        }
                    ]
                }
            ]
        },
        "color-block-directive": {
            "begin": "(\\{)",
            "end": "(\\})",
            "name": "color.block.directive.bcss",
            "isBlock": true,
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.punctuation.branket.start.bcss"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "keyword.operator.punctuation.branket.end.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#single-comment"
                },
                {
                    "include": "#custom-property-name-def"
                },
                {
                    "include": "#css-color-value-defs"
                },
                {
                    "include": "#end-instruction"
                }
            ]
        },
        "css-color-value-defs": {
            "begin": "\\s*(:)\\s*",
            "end": "(?=;|\\})",
            "beginCaptures": {
                "0": {
                    "name": "keyword.operator.punctuation.property.definition.bcss",
                    "transform": [
                        "trim",
                        "[$0 ]"
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#hex-color-type"
                },
                {
                    "match": "(#)*\\w+(?=;|}|$)",
                    "name": "invalid.color.definition.bcss markup.underline"
                }
            ]
        },
        "hex-color-type": {
            "patterns": [
                {
                    "include": "#web-known-colors"
                },
                {
                    "include": "#hex-colors"
                },
                {
                    "include": "#function-colors"
                }
            ]
        },
        "function-colors": {
            "begin": "\\b(rgb(a)?|hsl)\\b",
            "end": "(?<=\\))",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function.color-function.bcss color.function.bcss"
                }
            },
            "patterns": [
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "match": "\\s*,\\s*",
                            "transform": [
                                "trim",
                                "[$0 ]"
                            ]
                        },
                        {
                            "match": "\\s+",
                            "transform": [
                                "trim"
                            ]
                        },
                        {
                            "match": "(?:\\.)?\\d+(\\.(\\d+)?)?",
                            "name": "entity.name.type.constant",
                            "transform": [
                                "trim"
                            ]
                        }
                    ]
                }
            ]
        },
        "web-known-colors": {
            "name": "constant.character.escape.web-color.bcss constant.color.web.bcss",
            "className": "color",
            "tokenID": "webcolor",
            "match": "\\b(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|currentcolor|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|transparent|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)\\b"
        },
        "describ-comment": {
            "name": "comment.describ.comment.bcss",
            "begin": "^\\s*#\\s+",
            "end": "\\n|$",
            "patterns": [
                {
                    "match": "(?=\\s*\\n\\s*|$)",
                    "closeParent": {
                        "value": "\n",
                        "type": "error.info",
                        "className": "m-status-class",
                        "tokenID": "single-line"
                    }
                },
                {
                    "match": "([\\w\\-]+)(\\s+[\\w\\-]+)+",
                    "name": "meta.directive.comment.value.bcss",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.directive.name.bcss directive.name.bcss",
                            "className": "describ-name"
                        },
                        "2": {
                            "name": "entity.name.function.directive.value.bcss directive.value.bcss",
                            "className": "describ-value",
                            "transform": [
                                "trim",
                                "[ $0]"
                            ],
                            "patterns": [
                                {
                                    "include": "#value-definition"
                                }
                            ]
                        }
                    }
                }
            ],
            "endCaptures": {
                "0": {
                    "transform": "trim"
                }
            },
            "tokenID": "describ-comment",
            "className": "comment",
            "formattingMode": 1
        },
        "single-comment": {
            "match": "\\/\\/(.+)?$",
            "name": "comment.single-line-comment.bcss",
            "formattingMode": 5,
            "transform": "rtrim"
        },
        "web-litteral-var": {
            "match": "\\s*(-)+[\\w\\-]+",
            "name": "constant.type.litteral.var.bcss"
        },
        "native-css-function": {
            "name": "native.css.function.bcss",
            "begin": "\\b(clamp|calc|format|min|max|minmax|toggle|round|mod|rem|(a)?(cos|sin|tan(2)?)|pow|sqrt|hypot|log|exp|abs|sign|rgb|hsl|(ok)?(lch|lab)|color(-mix)?|device-cmyk|light-dark|attr|env|url|var|view|scroll|linear|steps|cubic-bezier|rotate|scale|translate|translate(X(Y(Z)?)?))\\b\\s*(\\()?",
            "end": "\\)",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function.native.function.bcss native.css.function.bcss"
                }
            },
            "patterns": [
                {
                    "match": "\\s*(,)\\s*",
                    "name": "punctuation.separator.bcss",
                    "transform": "trim"
                },
                {
                    "match": "\\s+(/|\\+|-|%|\\*)\\s+",
                    "name": "operator.property.separator.bcss",
                    "transform": [
                        "trim",
                        "[ $0 ]"
                    ]
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#length-with-unit"
                },
                {
                    "include": "#meaning-words"
                },
                {
                    "include": "#css-name"
                }
            ]
        },
        "css-value-definition": {
            "name": "value.definition.bcss",
            "patterns": [
                {
                    "name": "keyword.operator.punctuation.operator.property.separator.bcss",
                    "match": ","
                },
                {
                    "name": "keyword.operator.separator.bcss",
                    "match": "\\s*(\\/)\\s*",
                    "transform": [
                        "trim",
                        "[ $0 ]"
                    ]
                },
                {
                    "include": "#system-block-definition"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#web-litteral-var"
                },
                {
                    "include": "#hex-color-type"
                },
                {
                    "include": "#time-constant-unit"
                },
                {
                    "include": "#angle-with-unit"
                },
                {
                    "include": "#frequency-with-unit"
                },
                {
                    "include": "#length-with-unit"
                },
                {
                    "include": "#function-handler-patterns"
                },
                {
                    "include": "#meaning-words"
                }
            ]
        },
        "meaning-words": {
            "tokenID": "meaning",
            "className": "words",
            "comment": "patterns only groups for meanings words",
            "name": "entity.name.constant.meaning.word.bcss",
            "patterns": [
                {
                    "include": "#meaning-a"
                },
                {
                    "include": "#meaning-b"
                },
                {
                    "include": "#meaning-c"
                },
                {
                    "include": "#meaning-d"
                },
                {
                    "include": "#meaning-e"
                },
                {
                    "include": "#meaning-f"
                },
                {
                    "include": "#meaning-g"
                },
                {
                    "include": "#meaning-h"
                },
                {
                    "include": "#meaning-i"
                },
                {
                    "include": "#meaning-j"
                },
                {
                    "include": "#meaning-k"
                },
                {
                    "include": "#meaning-l"
                },
                {
                    "include": "#meaning-m"
                },
                {
                    "include": "#meaning-n"
                },
                {
                    "include": "#meaning-o"
                },
                {
                    "include": "#meaning-p"
                },
                {
                    "include": "#meaning-q"
                },
                {
                    "include": "#meaning-r"
                },
                {
                    "include": "#meaning-s"
                },
                {
                    "include": "#meaning-t"
                },
                {
                    "include": "#meaning-u"
                },
                {
                    "include": "#meaning-v"
                },
                {
                    "include": "#meaning-w"
                },
                {
                    "include": "#meaning-x"
                },
                {
                    "include": "#meaning-y"
                },
                {
                    "include": "#meaning-z"
                },
                {
                    "include": "#meaning-property"
                }
            ]
        },
        "meaning-property": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(static|sans-serif|serif|monospace|emoji|math|cursive|float|auto|relative|absolute|flex|inline-block|inherit|initial|current(c|C)olor)\\b"
        },
        "meaning-a": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(auto|alphabetic|additive)\\b"
        },
        "meaning-b": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(block|both)\\b"
        },
        "meaning-c": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(checkbox|cyclic)\\b"
        },
        "meaning-e": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(ease(-(in|out|inout))?)\\b"
        },
        "meaning-f": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(fixed|false)\\b"
        },
        "meaning-i": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(initial|inherit|inline(-(start|end))?)\\b"
        },
        "meaning-l": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(left)\\b"
        },
        "meaning-v": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(v(isible))\\b"
        },
        "meaning-n": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(none|numeric)\\b"
        },
        "meaning-r": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(revert(-layer)?|right)\\b"
        },
        "meaning-s": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(symbols|symbolic)\\b"
        },
        "meaning-t": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(top|true)\\b"
        },
        "meaning-u": {
            "name": "entity.name.type.constant.css.meaning.word.bcss",
            "match": "\\b(unset)\\b"
        },
        "function-handler-patterns": {
            "patterns": [
                {
                    "begin": "\\b(calc)\\b\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.calc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#calc-constant"
                        },
                        {
                            "include": "#css-operators"
                        },
                        {
                            "include": "#value-definition"
                        }
                    ]
                },
                {
                    "begin": "\\b(url)\\b\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.url"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#string"
                        },
                        {
                            "include": "#url-params"
                        }
                    ]
                },
                {
                    "begin": "\\b(format)\\b\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.url"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#string"
                        }
                    ]
                },
                {
                    "include": "#native-css-function"
                }
            ]
        },
        "time-constant-unit": {
            "name": "constant.type.time.bcss",
            "match": "(-|\\+)?((\\d+)?\\.)?\\d+((m)?s)"
        },
        "length-with-unit": {
            "name": "constant.numeric.type.length.bcss",
            "match": "(-)?(((\\d+)?\\.)?\\d+(Q|fr|dpi|dpcm|dppx|x|cm|mm|em|rem|in|pt|ex|ch|cap|ic|lh|r(cap|ch|em|ex|ic|lh)|(d|l|s)?(vh|vw)|vb|vi|vmin|vmax|cq(b|h|i|max|min|w)|%)|\\d+px|\\d+(\\.\\d+)?)",
            "tokenID": "length"
        },
        "angle-with-unit": {
            "name": "constant.numeric.type.angle.bcss",
            "match": "(-)?(((\\d+)?\\.)?\\d+(deg|rad|grad|turn))"
        },
        "frequency-with-unit": {
            "name": "constant.numeric.type.frequency.bcss",
            "match": "(-)?(((\\d+)?\\.)?\\d+((k)?Hz))"
        },
        "url-params": {
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "name": "constant.url.bcss",
                    "match": "(?i)(((ftp|http(s)|[a-z]+)?:(\\/{,2}))|(\\.)|\\s*)[^\\s\\/\\)]+(\\/[^\\s\\/\\)]+)*(\\/)?"
                }
            ]
        },
        "selection-tag-definition-o": {
            "comment": "sect css expression tags",
            "name": "constant.selection.tag.bcss",
            "begin": "((\\>|\\+|~|,)\\s*)?(\\.|\\#)?[\\-\\w]+(\\[.*\\])*(:{1,2}[\\-a-z][a-z0-9\\-]*)*(\\{)?",
            "end": "}",
            "beginCaptures": {},
            "endCaptures": {},
            "patterns": [],
            "isBlock": true
        },
        "bcss-multi-line-comment": {
            "begin": "/\\*",
            "end": "\\*/",
            "name": "comment.block",
            "formattingMode": 5,
            "patterns": [
                {
                    "match": "(?=\\$)",
                    "formattingMode": 1
                },
                {
                    "begin": "^\\s*\\*\\s",
                    "end": "$",
                    "name": "block.definition",
                    "patterns": [
                        {
                            "begin": "(@\\b([a-z]+)\\b)",
                            "end": "(?=$)",
                            "beginCaptures": {
                                "1": {
                                    "name": "variable.language.document.block"
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "calc-constant": {
            "name": "constant.css.calc.bcss",
            "match": "(?i)\\b(NaN|pi|e)\\b"
        },
        "css-operators": {
            "match": "\\s*(\\+|/|-|%|\\*)\\s*",
            "captures": {
                "1": {
                    "name": "keyword.operator.punctuation.operator.bcss"
                }
            }
        },
        "hex-colors": {
            "match": "(?i)\\s*(#([0-9a-f]{8}|[\\da-f]{6}|[\\da-f]{4}|[\\da-f]{3}))\\s*",
            "captures": {
                "1": {
                    "name": "constant.character.escape.hex-color.bcss constant.type.hex.color.bcss"
                }
            }
        },
        "string": {
            "patterns": [
                {
                    "include": "#single-quote-string"
                },
                {
                    "include": "#double-quote-string"
                }
            ]
        },
        "single-quote-string": {
            "name": "string.single.quoted.bcss",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "string.escaped.bcss",
                    "match": "\\\\."
                }
            ]
        },
        "double-quote-string": {
            "name": "string.double.quoted.bcss",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "string.escaped.bcss",
                    "match": "\\\\."
                }
            ]
        },
        "global-css-properties": {
            "patterns": [
                {
                    "include": "#css-properties-moz"
                },
                {
                    "include": "#css-properties-webkit"
                },
                {
                    "include": "#css-properties-a"
                },
                {
                    "include": "#css-properties-b"
                },
                {
                    "include": "#css-properties-c"
                },
                {
                    "include": "#css-properties-d"
                },
                {
                    "include": "#css-properties-e"
                },
                {
                    "include": "#css-properties-f"
                },
                {
                    "include": "#css-properties-g"
                },
                {
                    "include": "#css-properties-h"
                },
                {
                    "include": "#css-properties-i"
                },
                {
                    "include": "#css-properties-j"
                },
                {
                    "include": "#css-properties-l"
                },
                {
                    "include": "#css-properties-m"
                },
                {
                    "include": "#css-properties-moz"
                },
                {
                    "include": "#css-properties-o"
                },
                {
                    "include": "#css-properties-p"
                },
                {
                    "include": "#css-properties-q"
                },
                {
                    "include": "#css-properties-r"
                },
                {
                    "include": "#css-properties-s"
                },
                {
                    "include": "#css-properties-t"
                },
                {
                    "include": "#css-properties-u"
                },
                {
                    "include": "#css-properties-v"
                },
                {
                    "include": "#css-properties-w"
                },
                {
                    "include": "#css-properties-webkit"
                },
                {
                    "include": "#css-properties-x"
                },
                {
                    "include": "#css-properties-y"
                },
                {
                    "include": "#css-properties-z"
                }
            ]
        },
        "css-properties-moz": {
            "match": "(-)?moz-\\b(animation(-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function))?|appearance|backface-visibility|border(-(end|end-color|end-style|end-width|image|start|start-color|start-style|start-width))?|box(-(align|direction|flex|ordinal-group|orient|pack|sizing))?|float-edge|font(-(feature-settings|language-override))?|force-broken-image-icon|hyphens|margin(-(end|start))?|orient|osx-font-smoothing|padding(-(end|start))?|perspective-origin|tab-size|text-size-adjust|transform(-(origin|style))?|transition(-(delay|duration|property|timing-function))?|user(-(input|modify|select))?|window-dragging)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-webkit": {
            "match": "(-)?webkit-\\b(align(-(content|content|items|items|self|self))?|animation|animation(-(delay|delay|direction|direction|duration|duration|fill-mode|fill-mode|iteration-count|iteration-count|name|name|play-state|play-state|timing-function|timing-function))?|appearance|appearance|backface(-(visibility|visibility))?|background(-(clip|clip|origin|origin|size|size))?|border(-(bottom-left-radius|bottom-left-radius|bottom-right-radius|bottom-right-radius|image|image|radius|radius|top-left-radius|top-left-radius|top-right-radius|top-right-radius))?|box(-(align|align|direction|direction|flex|flex|ordinal-group|ordinal-group|orient|orient|pack|pack|shadow|shadow|sizing|sizing))?|clip(-(path|path))?|filter|filter|flex|flex(-(basis|basis|direction|direction|flow|flow|grow|grow|shrink|shrink|wrap|wrap))?|justify(-(content|content))?|line(-(clamp|clamp))?|mask|mask(-(clip|clip|composite|composite|image|image|origin|origin|position|position|position-x|position-x|position-y|position-y|repeat|repeat|size|size))?|order|order|perspective|perspective(-(origin|origin))?|text(-(fill-color|fill-color|security|security|size-adjust|size-adjust|stroke|stroke|stroke-color|stroke-color|stroke-width|stroke-width))?|transform|transform(-(origin|origin|style|style))?|transition|transition(-(delay|delay|duration|duration|property|property|timing-function|timing-function))?|user(-(select|select))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-a": {
            "match": "\\b(accent-color|all|animation-composition|aspect-ratio)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-b": {
            "match": "\\b(backdrop-filter|background(-(attachment|blend-mode|color|image|position|position-x|position-y|repeat))?|baseline-source|block-size|border(-(block|block-color|block-end|block-end-color|block-end-style|block-end-width|block-start|block-start-color|block-start-style|block-start-width|block-style|block-width|bottom|bottom-color|bottom-style|bottom-width|collapse|color|end-end-radius|end-start-radius|image-outset|image-repeat|image-slice|image-source|image-width|inline|inline-color|inline-end|inline-end-color|inline-end-style|inline-end-width|inline-start|inline-start-color|inline-start-style|inline-start-width|inline-style|inline-width|left|left-color|left-style|left-width|right|right-color|right-style|right-width|spacing|start-end-radius|start-start-radius|style|top|top-color|top-style|top-width|width))?|bottom|box-decoration-break|break(-(after|before|inside))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-c": {
            "match": "\\b(caption-side|caret-color|clear|clip-rule|color(-(adjust|interpolation|interpolation-filters|scheme))?|column(-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width))?|columns|contain(-(intrinsic-block-size|intrinsic-height|intrinsic-inline-size|intrinsic-size|intrinsic-width))?|container(-(name|type))?|content|counter(-(increment|reset|set))?|css-float|cursor|cx|cy)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-d": {
            "match": "\\b(d|direction|display|dominant-baseline)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-e": {
            "match": "\\b(empty-cells)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-f": {
            "match": "\\b(fill(-(opacity|rule))?|float|flood(-(color|opacity))?|font(-(family|kerning|optical-sizing|palette|size|size-adjust|stretch|style|synthesis|synthesis-position|synthesis-small-caps|synthesis-style|synthesis-weight|variant|variant-alternates|variant-caps|variant-east-asian|variant-ligatures|variant-numeric|variant-position|variation-settings|weight))?|forced-color-adjust)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-g": {
            "match": "\\b(gap|grid(-(area|auto-columns|auto-flow|auto-rows|column|column-end|column-gap|column-start|gap|row|row-end|row-gap|row-start|template|template-areas|template-columns|template-rows))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-h": {
            "match": "\\b(height|hyphenate-character)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-i": {
            "match": "\\b(image(-(orientation|rendering))?|ime-mode|inline-size|inset(-(block|block-end|block-start|inline|inline-end|inline-start))?|isolation)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-j": {
            "match": "\\b(justify(-(items|self))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-l": {
            "match": "\\b(left|letter-spacing|lighting-color|line(-(break|height))?|list(-(style|style-image|style-position|style-type))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-m": {
            "match": "\\b(margin(-(block|block-end|block-start|bottom|inline|inline-end|inline-start|left|right|top))?|marker(-(end|mid|start))?|mask(-(mode|type))?|math(-(depth|style))?|max(-(block-size|height|inline-size|width))?|min(-(block-size|height|inline-size|width))?|mix-blend-mode)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-o": {
            "match": "\\b(object(-(fit|position))?|offset(-(anchor|distance|path|position|rotate))?|opacity|outline(-(color|offset|style|width))?|overflow(-(anchor|block|clip-margin|inline|wrap|x|y))?|overscroll(-(behavior|behavior-block|behavior-inline|behavior-x|behavior-y))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-p": {
            "match": "\\b(padding(-(block|block-end|block-start|bottom|inline|inline-end|inline-start|left|right|top))?|page(-(break-after|break-before|break-inside))?|paint-order|place(-(content|items|self))?|pointer-events|position|print-color-adjust)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-q": {
            "match": "\\b(quotes)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-r": {
            "match": "\\b(r|resize|right|rotate|row-gap|ruby(-(align|position))?|rx|ry)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-s": {
            "match": "\\b(scale|scroll(-(behavior|margin|margin-block|margin-block-end|margin-block-start|margin-bottom|margin-inline|margin-inline-end|margin-inline-start|margin-left|margin-right|margin-top|padding|padding-block|padding-block-end|padding-block-start|padding-bottom|padding-inline|padding-inline-end|padding-inline-start|padding-left|padding-right|padding-top|snap-align|snap-stop|snap-type))?|scrollbar(-(color|gutter|width))?|shape(-(image-threshold|margin|outside|rendering))?|stop(-(color|opacity))?|stroke(-(dasharray|dashoffset|linecap|linejoin|miterlimit|opacity|width))?)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-t": {
            "match": "\\b(table-layout|text(-(align|align-last|anchor|combine-upright|decoration|decoration-color|decoration-line|decoration-skip-ink|decoration-style|decoration-thickness|emphasis|emphasis-color|emphasis-position|emphasis-style|indent|justify|orientation|overflow|rendering|shadow|transform|underline-offset|underline-position|wrap|wrap-mode|wrap-style))?|top|touch-action|transform-box|translate)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-u": {
            "match": "\\b(unicode-bidi)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-v": {
            "match": "\\b(vector-effect|vertical-align|visibility)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-w": {
            "match": "\\b(white(-(space|space-collapse))?|width|will-change|word(-(break|spacing|wrap))?|writing-mode)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-x": {
            "match": "\\b(x)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-y": {
            "match": "\\b(y)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "css-properties-z": {
            "match": "\\b(z-index)\\b",
            "name": "support.type.property-name.property.bcss",
            "tokenID": "property",
            "className": "property"
        },
        "selector-detection": {
            "patterns": [
                {
                    "include": "#meta-properties-selector"
                },
                {
                    "begin": "\\s*:\\s*",
                    "end": "(;|(?=\\}))",
                    "endMissingValue": ";",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.punctuation.property.value.bcss",
                            "transform": [
                                "trim",
                                "[$0 ]"
                            ]
                        }
                    },
                    "patterns": [
                        {
                            "include": "#css-value-definition"
                        }
                    ],
                    "formattingMode": 1
                }
            ]
        },
        "meta-properties-selector": {
            "comment": "start css selector",
            "begin": "\\*|(?:#|\\.|\\-\\-)?[a-zA-Z][a-zA-Z0-9\\-_]*\\b",
            "end": "\\}|;",
            "endMissingValue": "",
            "beginCaptures": {
                "0": {
                    "patterns": []
                }
            },
            "patterns": [
                {
                    "include": "#operator-split"
                },
                {
                    "include": "#bcss-inline-operator-selector"
                },
                {
                    "include": "#css-event-property"
                },
                {
                    "include": "#speudo-classes"
                },
                {
                    "comment": "on startLine - just append single line operator",
                    "startLine": true,
                    "match": "\\s*(\\*|(?:#|\\.|\\-\\-)?[a-zA-Z][a-zA-Z0-9\\-_]*\\b)",
                    "transform": [
                        "trim",
                        "[ $0]"
                    ],
                    "captures": {
                        "1": {
                            "patterns": []
                        }
                    }
                }
            ]
        },
        "operator-split": {
            "patterns": [
                {
                    "match": "\\s*(,)(?=[^\\s])",
                    "transform": [
                        "trim",
                        "[$0 ]"
                    ],
                    "transformMatch": "(,)\\s*",
                    "captures": {
                        "1": {
                            "name": "puncution.operator.selector.split.bcss"
                        }
                    }
                },
                {
                    "match": "\\s*(,)\\s*",
                    "transform": [
                        "trim",
                        "[$0 ]"
                    ],
                    "captures": {
                        "1": {
                            "name": "puncution.operator.selector.split.bcss"
                        }
                    }
                }
            ]
        },
        "bcss-inline-operator-selector": {
            "patterns": [
                {
                    "match": "\\s*(>|\\+|~|,)\\s*(?=\\*|[a-z#\\.])",
                    "transform": [
                        "trim",
                        "[ in $0]"
                    ],
                    "transformMatch": "\\s+(>|\\+|~|,)",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.punctuation.operator.bcss operator.join.bcss"
                        }
                    }
                },
                {
                    "match": "\\s*(>|\\+|~|,)\\s*",
                    "comment": "glue with white space",
                    "transform": [
                        "trim",
                        "[ $0]"
                    ]
                }
            ]
        },
        "css-event-property": {
            "match": "\\\\.[a-z][a-z0-9\\-_]+",
            "name": "string.event.property.bcss"
        },
        "next-tag-selector": {
            "match": "(\\s*)(\\*|(?:\\.|#)?[a-zA-Z][a-zA-Z0-9_\\-]*)",
            "comment": "no after punction operator - prepend extra space to join selector",
            "name": "sub-tag.selector.bcss",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "match": "\\s+",
                            "replaceWith": " "
                        }
                    ]
                },
                "2": {
                    "patterns": []
                }
            }
        },
        "array-attributes": {
            "begin": "\\[",
            "end": "\\]",
            "name": "array.block.bcss",
            "beginCaptures": {
                "0": {
                    "name": "keyword.operator.punctuation.attribute.start.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.punctuation.attribute.end.bcss"
                }
            },
            "patterns": [
                {
                    "match": "\\s+",
                    "transform": "trim",
                    "comment": "skipt array attribute"
                },
                {
                    "include": "#string"
                },
                {
                    "begin": "\\s*(?=((?:\\^|\\$|~|\\*|\\|)?=))",
                    "end": "(?=\\])",
                    "patterns": [
                        {
                            "name": "keyword.operator.punctuation.array.attribute.operator",
                            "match": "\\s*((?:\\^|\\$|~|\\*|\\|)?=)\\s*",
                            "transform": [
                                "trim",
                                "[$0]"
                            ]
                        },
                        {
                            "include": "#string"
                        },
                        {
                            "match": "\\b(i|I|s|S)\\b",
                            "name": "constant.flag.attribute.bcss"
                        }
                    ]
                }
            ]
        },
        "speudo-func-attributes": {
            "begin": "\\(",
            "end": "\\)",
            "name": "func.block.bcss"
        },
        "check-speudo-classes": {
            "begin": "((?:\\:)?:)(active|any-link|autofill|blank|checked|current|default|defined|dir|disabled|empty|enabled|first|first-child|first-of-type|focus|focus-visible|focus-within|fullscreen|future|has|host|host|host-context|hover|indeterminate|in-range|invalid|is|lang|last-child|last-of-type|left|link|local-link|modal|not|nth-child|nth-last-child|nth-last-of-type|nth-of-type|only-child|only-of-type|optional|out-of-range|past|paused|picture-in-picture|placeholder-shown|playing|read-only|read-write|required|right|root|scope|state|target|target-within|user-invalid|valid|visited|where)\\b",
            "end": "(?=:)",
            "patterns": [
                {
                    "include": "#speudo-classes"
                }
            ]
        },
        "speudo-classes": {
            "name": "keyword.control.speudo.class.bcss",
            "begin": "((?:\\:)?:)(active|any-link|autofill|blank|checked|current|default|defined|dir|disabled|empty|enabled|first|first-child|first-of-type|focus|focus-visible|focus-within|fullscreen|future|has|host|host|host-context|hover|indeterminate|in-range|invalid|is|lang|last-child|last-of-type|left|link|local-link|modal|not|nth-child|nth-last-child|nth-last-of-type|nth-of-type|only-child|only-of-type|optional|out-of-range|past|paused|picture-in-picture|placeholder-shown|playing|read-only|read-write|required|right|root|scope|state|target|target-within|user-invalid|valid|visited|where)\\b",
            "end": "\\s*(?=\\s[\\w\\*\\+~])|\\s+($)?|(?=\\+|:|~|,)",
            "endCaptures": {
                "0": {
                    "patterns": [
                        {
                            "match": "\\s+$",
                            "replaceWith": "",
                            "comment": "end line - remove trailing space"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "name": "next.function.definition.bcss"
                },
                {
                    "begin": "\\[",
                    "end": "\\]",
                    "name": "next.array.definition.bcss"
                },
                {
                    "include": "#speudo-classes"
                }
            ]
        },
        "page-rule": {
            "begin": "\\s*@\\b(page)\\b",
            "end": "$",
            "name": "meta.global.directive.bcss",
            "patterns": [
                {
                    "name": "constant.selector.bcss",
                    "match": ":\\b(first|left|right)\\b"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "list-rule": {
            "begin": "\\s*@\\b(list)\\b",
            "end": "$",
            "name": "meta.global.directive.bcss",
            "patterns": [
                {
                    "begin": "\\[",
                    "end": "\\]",
                    "name": "constant.list.array.bcss",
                    "patterns": [
                        {
                            "include": "#value-definition"
                        },
                        {
                            "match": ",",
                            "name": "keyword.operator.punctuation.separator.bcss"
                        }
                    ]
                },
                {
                    "include": "#list-block-capture"
                }
            ]
        },
        "list-block-capture": {
            "begin": "\\{",
            "end": "\\}",
            "name": "meta.block.capture.bcss",
            "endCaptures": {
                "0": {
                    "name": "meta.block.end.capture.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#list-selector-class"
                },
                {
                    "include": "#inside-block"
                }
            ],
            "isBlock": true
        },
        "list-selector-class": {
            "match": "\\s*\\.[\\w\\-%]+(\\\\%[\\w\\-%]+)*",
            "name": "entity.name.class.native.css.type.class.bcss"
        },
        "supports-rule": {
            "begin": "\\s*(@\\b(supports)\\b)",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.bcss"
                }
            },
            "patterns": [
                {
                    "name": "operator.property.separator.bcss",
                    "match": "\\s*\\b(and|or)\\b\\s*"
                },
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "name": "constant.property.name.bcss",
                            "match": "[\\w\\-]+"
                        },
                        {
                            "begin": "\\s*(:)\\s*",
                            "end": "(?=\\))",
                            "beginCaptures": {
                                "1": {
                                    "name": "property.css.punctuation.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#value-definition"
                                }
                            ]
                        }
                    ]
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "keyframes-rule": {
            "begin": "\\s*(@\\b(keyframes))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.keyframes.bcss"
                }
            },
            "patterns": [
                {
                    "name": "constant.keyframe.name.bcss",
                    "match": "\\b([\\w\\-_]+)\\b"
                },
                {
                    "include": "#block-capture-keyframes"
                }
            ]
        },
        "font-face-rule": {
            "begin": "\\s*(@\\b(font-face))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.fontface.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#block-capture"
                }
            ]
        },
        "color-profile-rule": {
            "begin": "\\s*(@\\b(color-profile))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.color.profile.bcss"
                }
            },
            "patterns": [
                {
                    "match": "\\b([\\w\\-]+)",
                    "name": "constant.property.name.bcss"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "container-rule": {
            "begin": "\\s*(@\\b(container))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.container.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#inside-block-conditional"
                },
                {
                    "include": "#condition-block"
                },
                {
                    "match": "\\b([\\w\\-]+)\\b\\s*",
                    "captures": {
                        "1": {
                            "name": "constant.property.name.container.bcss"
                        }
                    }
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "media-rule": {
            "begin": "\\s*(@\\b(media))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.media.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#inside-block-conditional"
                },
                {
                    "include": "#media-constant-operator"
                },
                {
                    "include": "#condition-operator-litteral"
                },
                {
                    "include": "#condition-block"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "charset-rule": {
            "begin": "\\s*(@\\b(charset))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                }
            ]
        },
        "document-rule": {
            "begin": "\\s*(@\\b(document))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "match": ","
                },
                {
                    "begin": "\\b(url(-prefix)?|domain|regexp)\\b",
                    "end": "(?=,|{)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.bcss"
                        }
                    },
                    "patterns": [
                        {
                            "begin": "\\(",
                            "end": "\\)",
                            "patterns": [
                                {
                                    "include": "#string"
                                },
                                {
                                    "include": "#url-params"
                                }
                            ]
                        },
                        {
                            "include": "#block-capture"
                        }
                    ]
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "namespace-rule": {
            "begin": "\\s*(@\\b(namespace))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                }
            ]
        },
        "counter-style-rule": {
            "begin": "\\s*(@\\b(counter-style))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.counter.style.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#css-name"
                },
                {
                    "include": "#counter-style-block-capture"
                }
            ]
        },
        "counter-style-block-capture": {
            "patterns": [
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "name": "meta.block.counter.style.block.bcss",
                    "patterns": [
                        {
                            "begin": "\\b(system|speak-as|pad|range|suffix|prefix|negative|additive-symbols|symbol)\\b",
                            "end": ";|$|(?=\\})",
                            "beginCaptures": {
                                "1": {
                                    "name": "constant.counter.style.property.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#match-value-definition"
                                }
                            ]
                        },
                        {
                            "include": "#property-definition"
                        }
                    ]
                }
            ]
        },
        "css-rules": {
            "patterns": [
                {
                    "include": "#page-rule"
                },
                {
                    "include": "#list-rule"
                },
                {
                    "include": "#list-block-capture"
                },
                {
                    "include": "#supports-rule"
                },
                {
                    "include": "#keyframes-rule"
                },
                {
                    "include": "#font-face-rule"
                },
                {
                    "include": "#color-profile-rule"
                },
                {
                    "include": "#container-rule"
                },
                {
                    "include": "#media-rule"
                },
                {
                    "include": "#charset-rule"
                },
                {
                    "include": "#document-rule"
                },
                {
                    "include": "#namespace-rule"
                },
                {
                    "include": "#counter-style-rule"
                },
                {
                    "include": "#counter-style-block-capture"
                }
            ]
        },
        "bcss-region-block": {
            "match": "accent",
            "name": "page.region.block.bcss"
           
        },
        "bcss-root-definition": {
            "patterns": [
                {
                    "include": "#single-line-comment"
                },
                {
                    "include": "#describ-comment"
                },
                {
                    "include": "#single-comment"
                },
                {
                    "include": "#bcss-multi-line-comment"
                },
                {
                    "include": "#skip-multispace"
                },
                {
                    "include": "#bcss-root-directives"
                },
                {
                    "include": "#global-directive-import"
                }
            ]
        },
        "global-directive-import": {
            "begin": "\\s*@\\b(import|apply|global)\\b",
            "end": ";|$",
            "name": "meta.global.directive.bcss",
            "formattingMode": 1,
            "beginCaptures": {
                "0": {
                    "name": "keyword.control.global.directive.bcss directive.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#end-instruction"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#bcss-directive-uri-definition"
                }
            ]
        },
        "bcss-directive-uri-definition": {
            "patterns": [
                {
                    "include": "#url"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#value-import-url-definition"
                }
            ]
        },
        "bcss-inline-directive": {
            "begin": "(@\\b(?:apply|import))\\b",
            "end": ";|(?=\\})",
            "name": "inline.directive.bcss",
            "endMissingValue": "",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.inline.directive.bcss directive.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#end-instruction"
                        }
                    ]
                }
            },
            "formattingMode": 1,
            "patterns": [
                {
                    "include": "#bcss-glue-white-space"
                },
                {
                    "include": "#bcss-directive-uri-definition"
                }
            ]
        },
        "bcss-property-value": {
            "begin": "((?:\\-*)\\b[a-zA-Z][a-zA-Z\\-_]*)\\s*",
            "end": "(?=:)",
            "name": "property.value:",
            "beginCaptures": {
                "0": {
                    "patterns": [
                        {
                            "match": ".+",
                            "name": "custom.properties"
                        }
                    ]
                }
            }
        },
        "bcss-selection-definition": {
            "patterns": [
                {
                    "include": "#capture-speudo-selector"
                },
                {
                    "include": "#array-attributes"
                },
                {
                    "include": "#bcss-inline-operator-selector"
                },
                {
                    "include": "#operator-split"
                },
                {
                    "include": "#bcss-media-block"
                },
                {
                    "include": "#bcss-glue-selector-white-space"
                },
                {
                    "begin": "\\:",
                    "end": "(?=;)",
                    "name": "invalid.data.marker.bcss"
                }
            ]
        },
        "capture-speudo-selector": {
            "begin": "(?:(?::)?:)\\b(active|any-link|autofill|blank|checked|current|default|defined|dir|disabled|empty|enabled|first|first-child|first-of-type|focus|focus-visible|focus-within|fullscreen|future|has|host|host|host-context|hover|indeterminate|in-range|invalid|is|lang|last-child|last-of-type|left|link|local-link|modal|not|nth-child|nth-last-child|nth-last-of-type|nth-of-type|only-child|only-of-type|optional|out-of-range|past|paused|picture-in-picture|placeholder-shown|playing|read-only|read-write|required|right|root|scope|state|target|target-within|user-invalid|valid|visited|where)\\b",
            "end": "(?=\\})|(?<=\\}|\\{)",
            "debugName": "_debug_capture.speudo.definition",
            "patterns": [
                {
                    "include": "#bcss-sub-selection-definition"
                }
            ],
            "beginCaptures": {
                "0": {
                    "name": "keyword.control.speudo.class.bcss"
                }
            }
        },
        "bcss-root-directives": {
            "patterns": [
                {
                    "include": "#media-directive"
                },
                {
                    "include": "#root-directive"
                },
                {
                    "include": "#color-directive"
                },
                {
                    "include": "#css-rules"
                }
            ]
        },
        "bcss-media-block": {
            "begin": "(\\{)",
            "end": "(\\})",
            "isBlock": true,
            "name": "meta.global.block.bcss",
            "comment": "block for css style definition",
            "patterns": [
                {
                    "include": "#single-comment"
                },
                {
                    "include": "#bcss-multi-line-comment"
                },
                {
                    "include": "#bcss-inline-directive"
                },
                {
                    "match": "\\\\(.+)?$",
                    "comment": "detect last trailing backslash to indentify as invalid syntax",
                    "name": "invalid.properties",
                    "lintError": {
                        "$ref": 101
                    }
                },
                {
                    "include": "#bcss-root-media"
                }
            ],
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.punctuation.branket.start.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.punctuation.branket.end.bcss"
                }
            }
        },
        "bcss-root-entry-properties": {
            "begin": "(?=(\\*|(\\.|#|-*)?[a-zA-Z][a-zA-Z-\\_]*))",
            "end": "(?=;|\\}|\\{)",
            "endMissingValue": "",
            "formattingMode": 4,
            "name": "root-properties",
            "comment": "definition of core root properties",
            "patterns": [
                {
                    "include": "#capture-speudo-selector"
                },
                {
                    "begin": "(?=\\s*(\\+|>|~|,)\\s*)",
                    "end": "(?=\\s|\\w)",
                    "name": "try.select.operator",
                    "patterns": [
                        {
                            "include": "#bcss-inline-operator-selector"
                        },
                        {
                            "match": "\\s*$",
                            "replaceWith": "",
                            "name": "skip.operator.wp.bcss"
                        }
                    ]
                },
                {
                    "begin": "(?=\\[)",
                    "end": "(?<=\\])",
                    "patterns": [
                        {
                            "include": "#bcss-selection-definition"
                        }
                    ]
                },
                {
                    "include": "#bcss-start-sub-property"
                },
                {
                    "include": "#css-value-defs"
                },
                {
                    "begin": "(?=-+[a-zA-Z][a-zA-Z0-9\\-_]*)",
                    "end": "(?=:|;)",
                    "patterns": [
                        {
                            "comment": "for custom property expected custom property",
                            "begin": "\\{",
                            "end": "(?=\\})",
                            "name": "invalid.custom.property"
                        },
                        {
                            "include": "#bcss-custom-property"
                        }
                    ]
                },
                {
                    "include": "#bcss-selector-def"
                },
                {
                    "include": "#end-instruction"
                }
            ]
        },
        "bcss-start-sub-property": {
            "begin": "(?=\\.|#)",
            "end": "(?=\\}|\\{)",
            "name": "start-sub",
            "patterns": [
                {
                    "include": "#bcss-selector-def"
                },
                {
                    "include": "#bcss-selection-definition"
                }
            ]
        },
        "bcss-custom-property": {
            "match": "-+[a-zA-Z][a-zA-Z0-9\\-_]*",
            "name": "support.type.property-name.property.bcss custom.property.bcss"
        },
        "bcss-skip-glue-whitespace": {
            "match": "\\s+($)?",
            "replaceWith": "",
            "isGlueValue": ""
        },
        "bcss-detect-sub-class-id-selector": {
            "begin": "(?=\\s*(-*|\\.|#)?[a-zA-Z][a-zA-Z0-9\\-_])",
            "end": "(?= |\\*|>|:|;|\\[|\\(|\\{|\\})",
            "name": "subcaptuyre",
            "patterns": []
        },
        "bcss-selector-def": {
            "patterns": [
                {
                    "include": "#bcss-invalid-selector-trailing"
                },
                {
                    "begin": "(?=(?:\\.|#)?[a-zA-Z][a-zA-Z0-9_]*)",
                    "end": "(?=\\s|:|\\+|>|~|$)",
                    "comment": "start real selector definition",
                    "patterns": [
                        {
                            "comment": "expected selection on tag or class identifier",
                            "begin": "(#|\\.)(?:(\\s*$|([a-zA-Z][a-zA-Z0-9_\\-]*(?:\\\\.[a-zA-Z][a-zA-Z0-9_\\-]*)*)))",
                            "end": "(?=\\s|:|\\+|>|~|$)",
                            "beginCaptures": {
                                "0": {
                                    "patterns": [
                                        {
                                            "include": "#bcss-id-class-selector-match"
                                        }
                                    ]
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#bcss-invalid-selector-trailing"
                                },
                                {
                                    "include": "#bcss-id-class-selector-match"
                                },
                                {
                                    "include": "#bcss-selection-definition"
                                }
                            ]
                        },
                        {
                            "match": "(#|\\.)?(?:(\\s*$|([a-zA-Z][a-zA-Z0-9_\\-]*(?:\\\\.[a-zA-Z][a-zA-Z0-9_\\-]*)*)))",
                            "captures": {
                                "0": {
                                    "patterns": [
                                        {
                                            "include": "#bcss-invalid-selector-trailing"
                                        },
                                        {
                                            "include": "#bcss-id-class-selector-match"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "match": "\\\\.",
                            "name": "global.escape"
                        },
                        {
                            "include": "#bcss-invalid-selector-trailing"
                        }
                    ]
                },
                {
                    "begin": "(?:\\.|#)",
                    "end": "(?=\\s|:|\\+|>|~|$)",
                    "comment": "match single tag symbol to invalidate data",
                    "beginCaptures": {
                        "0": {
                            "patterns": [
                                {
                                    "match": "\\.",
                                    "name": "entity.name.function.class.bcss class.bcss"
                                },
                                {
                                    "match": "#",
                                    "name": "entity.name.type.identifier.bcss identifier.bcss"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "bcss-check-end-trailing": {
            "match": "\\\\$",
            "name": "invalid.trailing marker"
        },
        "bcss-id-class-selector-match": {
            "patterns": [
                {
                    "match": "\\.([a-zA-Z][a-zA-Z0-9_\\-]*(?:\\\\(.([a-zA-Z][a-zA-Z0-9_\\-]*)*)*)*)?",
                    "name": "entity.name.function.class.bcss class.bcss",
                    "captures": {
                        "0": {
                            "patterns": [
                                {
                                    "include": "#bcss-check-end-trailing"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "#([a-zA-Z][a-zA-Z0-9_\\-]*(?:\\\\(.([a-zA-Z][a-zA-Z0-9_\\-]*)*)*)*)?",
                    "name": "entity.name.type.identifier.bcss identifier.bcss",
                    "captures": {
                        "0": {
                            "patterns": [
                                {
                                    "include": "#bcss-check-end-trailing"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "([a-zA-Z][a-zA-Z0-9_\\-]*(?:\\\\(.([a-zA-Z][a-zA-Z0-9_\\-]*)*)*)*)?",
                    "name": "entity.name.tag.bcss tag.bcss",
                    "captures": {
                        "0": {
                            "patterns": [
                                {
                                    "include": "#bcss-check-end-trailing"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "bcss-invalid-block": {
            "begin": "\\{",
            "end": "(?=\\})",
            "name": "invalid.property.block",
            "formattingMode": 1,
            "isBlock": true,
            "patterns": [
                {
                    "match": "(?<=\\{).+(?=\\})",
                    "name": "lala"
                }
            ]
        },
        "bcss-invalid-selector-trailing": {
            "match": "(\\.|#)\\s*$",
            "name": "invalid.trailing.end.definition.bcss"
        },
        "bcss-custom-property-definition-patterns": {
            "patterns": [
                {
                    "match": "(?=:)",
                    "comment": "skip : for value definition on end"
                },
                {
                    "include": "#bcss-class-or-id-selector"
                },
                {
                    "include": "#bcss-selection-definition"
                }
            ]
        },
        "bcss-class-or-id-selector": {
            "begin": "(?=\\.|#)",
            "end": "(?<=\\}|;)",
            "name": "check.bcss",
            "patterns": [
                {
                    "include": "#bcss-selector-def"
                },
                {
                    "include": "#bcss-selection-definition"
                }
            ]
        },
        "bcss-sub-property-entry-definition": {
            "patterns": [
                {
                    "begin": "(?=(.|#)?[a-zA-Z][a-zA-Z]*)",
                    "end": "(?<=\\}|;)",
                    "contentName": "sub-property-entry",
                    "patterns": [
                        {
                            "begin": "((.|#)?([a-zA-Z][a-zA-Z]*)(\\\\.[a-z][a-z0-9]*)*)",
                            "end": "(?<=\\}|;)",
                            "beginCaptures": {
                                "0": {
                                    "patterns": [
                                        {
                                            "include": "#bcss-sub-html5-tag-definition"
                                        },
                                        {
                                            "include": "#bcss-class-or-id-selector"
                                        }
                                    ]
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#bcss-sub-html5-tag-definition"
                                },
                                {
                                    "include": "#bcss-class-or-id-selector"
                                },
                                {
                                    "include": "#bcss-selection-definition"
                                }
                            ]
                        },
                        {
                            "include": "#bcss-selection-definition"
                        }
                    ]
                },
                {
                    "match": "#",
                    "name": "start.identifier.bcss"
                }
            ]
        },
        "bcss-sub-html5-tag-definition": {
            "patterns": [
                {
                    "comment": "detect sub  html5 start tag. Must use {} definition",
                    "match": "\\b(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase|asefont|di|do|ig|lockquote|ody|r|utton)?|c(anvas|aption|enter|ite|ode|ol|olgroup)|d(ata|atalist|d|el|etails|fn|ialog|ir|iv|l|t)|e(m|mbed)|f(ieldset|igcaption|igure|ont|ooter|orm|rame|rameset)|h(ead|eader|group|1|2|3|4|5|6|r|tml)|i(frame|mg|nput|ns)?|k(bd|eygen)|l(abel|egend|i|ink)|m(ain|ap|ark|enu|enuitem|eta|eter)|n(av|oframes|oscript)|o(bject|l|ptgroup|ption|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)?|t(able|body|d|emplate|extarea|foot|h|head|ime|itle|r|rack|t)|u(l)?|v(ar|ideo)|w(br))\\b[a-zA-Z\\-]+",
                    "transform": [
                        "[ $0]"
                    ],
                    "transformMatch": "\\s(.+)",
                    "captures": {
                        "0": {
                            "name": "entity.name.tag.custom-tag.or.property.bcss custom-tag.or.property.sub.bcss sub"
                        }
                    }
                },
                {
                    "match": "\\b(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase|asefont|di|do|ig|lockquote|ody|r|utton)?|c(anvas|aption|enter|ite|ode|ol|olgroup)|d(ata|atalist|d|el|etails|fn|ialog|ir|iv|l|t)|e(m|mbed)|f(ieldset|igcaption|igure|ont|ooter|orm|rame|rameset)|h(ead|eader|group|1|2|3|4|5|6|r|tml)|i(frame|mg|nput|ns)?|k(bd|eygen)|l(abel|egend|i|ink)|m(ain|ap|ark|enu|enuitem|eta|eter)|n(av|oframes|oscript)|o(bject|l|ptgroup|ption|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)?|t(able|body|d|emplate|extarea|foot|h|head|ime|itle|r|rack|t)|u(l)?|v(ar|ideo)|w(br))\\b",
                    "comment": "match sub html5 start tag.",
                    "transform": [
                        "[ $0]"
                    ],
                    "transformMatch": "\\s(.+)",
                    "captures": {
                        "0": {
                            "name": "entity.name.tag.html5-tag.bcss sub"
                        }
                    }
                }
            ]
        },
        "bcss-sub-selection-definition": {
            "patterns": [
                {
                    "include": "#bcss-selection-definition"
                },
                {
                    "include": "#bcss-sub-property-entry-definition-"
                }
            ]
        },
        "bcss-media-block-properties": {
            "patterns": [
                {
                    "include": "#single-comment"
                },
                {
                    "include": "#bcss-multi-line-comment"
                },
                {
                    "include": "#bcss-inline-directive"
                },
                {
                    "include": "#bcss-media-block"
                },
                {
                    "match": "\\\\.+$",
                    "name": "invalid.properties"
                },
                {
                    "include": "#bcss-start-sub-property"
                },
                {
                    "begin": "(?=\\[)",
                    "end": "(?=:)|(?<=\\}|;|\\])",
                    "patterns": [
                        {
                            "include": "#array-attributes"
                        },
                        {
                            "include": "#bcss-selection-definition"
                        }
                    ]
                },
                {
                    "comment": "detect html5 start tag. Must use {} definition",
                    "begin": "(?=p:active)",
                    "end": "(?=:|\\})|(?<=\\}|;)",
                    "name": "check-proper",
                    "patterns": [
                        {
                            "begin": ".+(?:\\\\.[a-zA-Z][a-zA-Z0-9\\-]*)+",
                            "end": "(?=\\}|:)|(?<=;)",
                            "comment": "content list of event",
                            "name": "entity.name.tag.event.property.bcss event.property",
                            "patterns": [
                                {
                                    "include": "#bcss-selection-definition"
                                },
                                {
                                    "include": "#bcss-sub-selection-definition"
                                }
                            ]
                        },
                        {
                            "begin": "\\b(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase|asefont|di|do|ig|lockquote|ody|r|utton)?|c(anvas|aption|enter|ite|ode|ol|olgroup)|d(ata|atalist|d|el|etails|fn|ialog|ir|iv|l|t)|e(m|mbed)|f(ieldset|igcaption|igure|ont|ooter|orm|rame|rameset)|h(ead|eader|group|1|2|3|4|5|6|r|tml)|i(frame|mg|nput|ns)?|k(bd|eygen)|l(abel|egend|i|ink)|m(ain|ap|ark|enu|enuitem|eta|eter)|n(av|oframes|oscript)|o(bject|l|ptgroup|ption|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)?|t(able|body|d|emplate|extarea|foot|h|head|ime|itle|r|rack|t)|u(l)?|v(ar|ideo)|w(br))\\b[a-zA-Z\\-]*(?:\\\\.[a-zA-Z][a-zA-Z0-9\\-]*)*|((?:-)*[a-zA-Z\\-][a-zA-Z0-9\\-]*)",
                            "end": "(?=:)|(?<=\\}|;)",
                            "beginCaptures": {
                                "0": {
                                    "patterns": [
                                        {
                                            "match": "\\b(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase|asefont|di|do|ig|lockquote|ody|r|utton)?|c(anvas|aption|enter|ite|ode|ol|olgroup)|d(ata|atalist|d|el|etails|fn|ialog|ir|iv|l|t)|e(m|mbed)|f(ieldset|igcaption|igure|ont|ooter|orm|rame|rameset)|h(ead|eader|group|1|2|3|4|5|6|r|tml)|i(frame|mg|nput|ns)?|k(bd|eygen)|l(abel|egend|i|ink)|m(ain|ap|ark|enu|enuitem|eta|eter)|n(av|oframes|oscript)|o(bject|l|ptgroup|ption|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)?|t(able|body|d|emplate|extarea|foot|h|head|ime|itle|r|rack|t)|u(l)?|v(ar|ideo)|w(br))\\b[a-zA-Z\\-]*(?:\\\\.[a-zA-Z][a-zA-Z0-9\\-]*)*",
                                            "name": "entity.name.tag.bcss tag.start.bcss"
                                        },
                                        {
                                            "include": "#global-css-properties"
                                        },
                                        {
                                            "match": "(-*(?:[a-zA-Z][a-zA-Z]*)?)",
                                            "name": "entity.name.tag.custom-property.bcss"
                                        }
                                    ]
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#bcss-custom-property-definition-patterns"
                                },
                                {
                                    "include": "#bcss-sub-selection-definition"
                                }
                            ]
                        },
                        {
                            "begin": "\\b(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase|asefont|di|do|ig|lockquote|ody|r|utton)?|c(anvas|aption|enter|ite|ode|ol|olgroup)|d(ata|atalist|d|el|etails|fn|ialog|ir|iv|l|t)|e(m|mbed)|f(ieldset|igcaption|igure|ont|ooter|orm|rame|rameset)|h(ead|eader|group|1|2|3|4|5|6|r|tml)|i(frame|mg|nput|ns)?|k(bd|eygen)|l(abel|egend|i|ink)|m(ain|ap|ark|enu|enuitem|eta|eter)|n(av|oframes|oscript)|o(bject|l|ptgroup|ption|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)?|t(able|body|d|emplate|extarea|foot|h|head|ime|itle|r|rack|t)|u(l)?|v(ar|ideo)|w(br))\\b",
                            "end": "(?<=;|\\})",
                            "beginCaptures": {
                                "0": {
                                    "name": "entity.name.tag.html5-tag.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#bcss-selection-definition"
                                },
                                {
                                    "include": "#bcss-sub-selection-definition"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(?=\\b([a-zA-Z0-9\\-][a-zA-Z0-9\\-]*)\\b)",
                    "end": "(?=:)|(?<=\\}|;)",
                    "comment": "match custom properties",
                    "patterns": [
                        {
                            "begin": "\\b([a-zA-Z0-9\\-][a-zA-Z0-9\\-]*)\\b",
                            "end": "(?=:)|(?<=\\}|;)",
                            "beginCaptures": {
                                "0": {
                                    "name": "entity.name.tag.custom-tag.or.property.bcss custom-tag.or.property.start.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#bcss-sub-property-entry-definition-"
                                },
                                {
                                    "include": "#bcss-custom-property-definition-patterns"
                                },
                                {
                                    "include": "#bcss-selection-definition"
                                }
                            ]
                        }
                    ]
                },
                {
                    "include": "#css-value-defs"
                },
                {
                    "include": "#end-instruction"
                }
            ]
        },
        "bcss-speudo-function": {
            "begin": "\\(",
            "end": "\\)",
            "patterns": []
        },
        "bcss-array-attribute": {
            "begin": "\\[",
            "end": "\\]",
            "patterns": []
        },
        "bcss-class-id-root": {
            "begin": "\\.(([a-zA-Z][a-zA-Z]*)(\\\\.[a-zA-Z][a-zA-Z]*)?)?",
            "end": "(?=;|\\s|:|\\+|>|~|#|\\{|\\.)|(?<=})",
            "beginCaptures": {
                "0": {
                    "name": "entity.name.function.class.class"
                }
            },
            "patterns": [
                {
                    "include": "#bcss-array-attribute"
                },
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "name": "invalid.class-def.bcss"
                }
            ]
        },
        "bcss-identifier-id-root": {
            "begin": "#([a-zA-Z][a-zA-Z\\-_]*(\\\\.[a-zA-Z][a-zA-Z]*)?)?",
            "end": "(?=;|\\s|:|\\+|>|~|#|\\.)|(?<=})",
            "beginCaptures": {
                "0": {
                    "name": "entity.name.class.identifier"
                }
            },
            "patterns": [
                {
                    "include": "#bcss-array-attribute"
                }
            ]
        },
        "bcss-speudo-id-root": {
            "begin": ":(:)?[a-zA-Z][a-zA-Z]*",
            "end": "(?=;|\\s|:|\\+|>|~|#|\\{)|(?<=})",
            "beginCaptures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#speudo-classes"
                        },
                        {
                            "match": ":(:)?[a-zA-Z][a-zA-Z]*",
                            "name": "invalid.speudo.class"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#bcss-speudo-function"
                },
                {
                    "include": "#bcss-array-attribute"
                }
            ]
        },
        "bcss-select-sub-patterns": {
            "name": "sub",
            "begin": "(?=\\s*(\\.|#|-+)?[a-zA-Z][a-zA-Z]*(\\\\.[a-zA-Z][a-zA-Z\\-]*)?((\\.|#|:)[a-zA-Z][a-zA-Z]*)*)",
            "end": "(?=:|\\{|\\})|(?<=\\})",
            "patterns": [
                {
                    "match": "\\s+",
                    "replaceWith": "",
                    "isGlueValue": " ",
                    "name": "subdetection"
                },
                {
                    "begin": "(?:\\.|#|-+)?[a-zA-Z][a-zA-Z]*(?:\\\\.[a-zA-Z][a-zA-Z\\-]*)?(?:(?:\\.|#|:)[a-zA-Z][a-zA-Z]*)*",
                    "end": "(?=:|\\s|\\{|\\})|(?<=})",
                    "name": "subcapture",
                    "transform": [
                        "trim",
                        "[ $0]"
                    ],
                    "transformMatch": "\\s+(.+)",
                    "beginCaptures": {
                        "0": {
                            "patterns": [
                                {
                                    "include": "#bcss-capture-id-class-selection"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "bcss-capture-id-class-selection": {
            "begin": "(\\.|#)?[a-zA-Z][a-zA-Z]*(\\\\.[a-zA-Z][a-zA-Z]*)?",
            "end": "(?=\\s|>|\\+|~|\\[|\\})|(?<=})",
            "name": "bcss-capture-id-class-selection-",
            "beginCaptures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#bcss-class-id-root"
                        },
                        {
                            "include": "#bcss-identifier-id-root"
                        },
                        {
                            "name": "entity.name.tag.class.bcss",
                            "match": "[a-zA-Z][a-zA-Z]*(\\\\.[a-zA-Z][a-zA-Z]*)?",
                            "captures": {
                                "1": {
                                    "name": "event"
                                }
                            }
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#bcss-array-attribute"
                },
                {
                    "include": "#bcss-speudo-id-root"
                },
                {
                    "include": "#bcss-class-id-root"
                },
                {
                    "include": "#bcss-identifier-id-root"
                },
                {
                    "include": "#bcss-media-block-properties"
                }
            ]
        },
        "bcss-html5-tag-definition": {
            "begin": "(?:a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase|asefont|di|do|ig|lockquote|ody|r|utton)?|c(anvas|aption|enter|ite|ode|ol|olgroup)|d(ata|atalist|d|el|etails|fn|ialog|ir|iv|l|t)|e(m|mbed)|f(ieldset|igcaption|igure|ont|ooter|orm|rame|rameset)|h(ead|eader|group|1|2|3|4|5|6|r|tml)|i(frame|mg|nput|ns)?|k(bd|eygen)|l(abel|egend|i|ink)|m(ain|ap|ark|enu|enuitem|eta|eter)|n(av|oframes|oscript)|o(bject|l|ptgroup|ption|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)?|t(able|body|d|emplate|extarea|foot|h|head|ime|itle|r|rack|t)|u(l)?|v(ar|ideo)|w(br))",
            "end": "(?=\\}|\\{|\\+|~|>|,)",
            "beginCaptures": {
                "0": {
                    "name": "entity.name.tag.html5-definition.bcss"
                }
            },
            "patterns": [
                {
                    "match": "(\\\\:([a-z][a-z0-9\\-]*)*)",
                    "name": "entity.name.tag.html5-definition.bcss html5.event.bcss"
                },
                {
                    "begin": "\\s*(:)\\s*",
                    "end": ";",
                    "name": "invalid.syntax",
                    "lintError": {
                        "message": "expected block definition",
                        "code": "101"
                    },
                    "endCaptures": {
                        "0": {
                            "name": "entity.name.class"
                        }
                    },
                    "patterns": [
                        {
                            "match": "[^;]+"
                        }
                    ]
                },
                {
                    "include": "#bcss-css-sub-detection"
                },
                {
                    "include": "#bcss-css-glue-id-class"
                }
            ]
        },
        
        "bcss-css-glue-id-class": {
            "match": "(\\.|#)[a-zA-Z][a-zA-Z]*(\\\\.[a-zA-Z][a-zA-Z\\-]*)?((\\.|#|:)[a-zA-Z][a-zA-Z]*)*",
            "name": "glue-definition",
            "captures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#bcss-capture-id-class-selection"
                        }
                    ]
                }
            }
        },
        "bcss-css-selector-operator": {
            "patterns": [
                {
                    "match": "\\s*(\\+|>|~)\\s*",
                    "name": "meta.selector.css keyword.operator.combinator.css punctuation.selector.operator.bcss",
                    "transform": [
                        "trim",
                        "[ $0]"
                    ]
                },
                {
                    "match": "\\s*(,)\\s*",
                    "name": "meta.selector.css punctuation.separator.list.comma.css punctuation.separator.operator.bcss",
                    "transform": [
                        "trim",
                        "[$0 ]"
                    ]
                }
            ]
        },
        "bcss-css-sub-detection": {
            "patterns": [
                {
                    "begin": "(?=\\s|^|rm)",
                    "end": "(?=:|\\}|\\{|,)",
                    "name": "detect.sub--start",
                    "patterns": [
                        {
                            "include": "#bcss-select-sub-patterns"
                        }
                    ]
                }
            ]
        },
        "bcss-css-property-value-only": {
            "patterns": [
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "name": "invalid.property.definition",
                    "lintError": {
                        "$ref": 102
                    }
                },
                {
                    "match": "\\s+",
                    "replaceWith": ""
                }
            ]
        },
        "bcss-css-property-selector-only": {
            "patterns": [
                {
                    "begin": ":",
                    "end": "(?=$)",
                    "name": "invalid.selector.definition",
                    "lintError": {
                        "$ref": 103
                    }
                },
                {
                    "include": "#bcss-sub-selection-definition"
                }
            ]
        },
        "bcss-css-custom-property": {
            "begin": "(-+[a-z][a-z0-9\\-]*)",
            "end": "(?=:)",
            "beginCaptures": {
                "0": {
                    "name": "variable.language.custom.property.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#bcss-css-property-value-only"
                }
            ]
        },
        "bcss-css-root-id-class": {
            "begin": "(#|\\.)[a-z][a-z0-9\\-]*(\\\\(.([a-z][a-z0-9\\-]*)*)*)*",
            "end": "(?=\\}|\\{|;)",
            "name": "root-id",
            "beginCaptures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#bcss-id-class-selector-match"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#bcss-css-property-selector-only"
                }
            ]
        },
        "bcss-html5-tag": {
            "begin": "[0-9a-z][0-9a-z\\-]*(\\\\.[0-9a-z][0-9a-z\\-]*)*",
            "end": "(?=\\s)",
            "name": "entity.name.tag.html5-tag.bcss",
            "beginCaptures": {
                "0": {
                    "patterns": [
                        {
                            "match": "\\\\.[0-9a-z][0-9a-z\\-]*",
                            "name": "html5.event.bcss"
                        }
                    ]
                }
            }
        },
        "bcss-css-root-tag-property": {
            "begin": "(?=(?!<[\\w\\-])(a(bbr|cronym|ddress|pplet|re|rticle|side|udio)|a|b(di|do|ig|lockquote|ody|r|utton)|b|b(ase(font))|canvas|caption|center|cite|code|col(group)|col|data(list)|data|dd|del|details|dfn|dialog|dir|div|dl|dt|em(bed)|em|fieldset|figcaption|figure|font|footer|form|frame(set)|frame|h1|h2|h3|h4|h5|h6|head(er)|head|hgroup|hr|html|i(frame|mg|nput|ns)|i|kbd|keygen|label|legend|li(nk)|li|main|map|mark|menu(item)|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p(aram|icture|re|rogress)|p|q|rp|rt|ruby|s(amp|cript|ection|elect|mall|ource|pan|trike|trong|tyle|ub|ummary|up|vg)|s|table|tbody|td|template|textarea|tfoot|th(ead)|th|time|title|tr(ack)|tr|tt|u(l)|u|var|video|wbr)(?![\\w\\-]))",
            "end": "(?=\\})",
            "name": "root-tag",
            "patterns": [
                {
                    "include": "#bcss-html5-tag"
                },
                {
                    "include": "#bcss-css-property-selector-only"
                }
            ]
        },
        "bcss-css-root-css-property": {
            "patterns": [
                {
                    "begin": "(?!<[\\w\\-])(?:accent-color|additive-symbols|align-content|align-items|align-self|alignment-baseline|all|alt|animation|animation-composition|animation-delay|animation-direction|animation-duration|animation-fill-mode|animation-iteration-count|animation-name|animation-play-state|animation-range|animation-range-end|animation-range-start|animation-timeline|animation-timing-function|app-region|appearance|apple-pay-button-style|apple-pay-button-type|ascent-override|aspect-ratio|backdrop-filter|backface-visibility|background|background-attachment|background-blend-mode|background-clip|background-color|background-image|background-origin|background-position|background-position-x|background-position-y|background-repeat|background-repeat-x|background-repeat-y|background-size|base-palette|baseline-shift|baseline-source|block-size|border|border-block|border-block-color|border-block-end|border-block-end-color|border-block-end-style|border-block-end-width|border-block-start|border-block-start-color|border-block-start-style|border-block-start-width|border-block-style|border-block-width|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius|border-bottom-style|border-bottom-width|border-collapse|border-color|border-end-end-radius|border-end-start-radius|border-image|border-image-outset|border-image-repeat|border-image-slice|border-image-source|border-image-width|border-inline|border-inline-color|border-inline-end|border-inline-end-color|border-inline-end-style|border-inline-end-width|border-inline-start|border-inline-start-color|border-inline-start-style|border-inline-start-width|border-inline-style|border-inline-width|border-left|border-left-color|border-left-style|border-left-width|border-radius|border-right|border-right-color|border-right-style|border-right-width|border-spacing|border-start-end-radius|border-start-start-radius|border-style|border-top|border-top-color|border-top-left-radius|border-top-right-radius|border-top-style|border-top-width|border-width|bottom|box-decoration-break|box-shadow|box-sizing|break-after|break-before|break-inside|buffered-rendering|caption-side|caret-color|clear|clip|clip-path|clip-rule|color|color-adjust|color-interpolation|color-interpolation-filters|color-rendering|color-scheme|column-count|column-fill|column-gap|column-rule|column-rule-color|column-rule-style|column-rule-width|column-span|column-width|columns|contain|contain-intrinsic-block-size|contain-intrinsic-height|contain-intrinsic-inline-size|contain-intrinsic-size|contain-intrinsic-width|container|container-name|container-type|content|content-visibility|counter-increment|counter-reset|counter-set|css-float|css-rules|cursor|cx|cy|d|descent-override|direction|display|dominant-baseline|empty-cells|epub-caption-side|epub-hyphens|epub-text-combine|epub-text-emphasis|epub-text-emphasis-color|epub-text-emphasis-style|epub-text-orientation|epub-text-transform|epub-word-break|epub-writing-mode|fallback|field-sizing|fill|fill-opacity|fill-rule|filter|flex|flex-basis|flex-direction|flex-flow|flex-grow|flex-shrink|flex-wrap|float|flood-color|flood-opacity|font|font-display|font-family|font-feature-settings|font-kerning|font-language-override|font-optical-sizing|font-palette|font-size|font-size-adjust|font-stretch|font-style|font-synthesis|font-synthesis-position|font-synthesis-small-caps|font-synthesis-style|font-synthesis-weight|font-variant|font-variant-alternates|font-variant-caps|font-variant-east-asian|font-variant-ligatures|font-variant-numeric|font-variant-position|font-variation-settings|font-weight|forced-color-adjust|gap|glyph-orientation-horizontal|glyph-orientation-vertical|grid|grid-area|grid-auto-columns|grid-auto-flow|grid-auto-rows|grid-column|grid-column-end|grid-column-gap|grid-column-start|grid-gap|grid-row|grid-row-end|grid-row-gap|grid-row-start|grid-template|grid-template-areas|grid-template-columns|grid-template-rows|hanging-punctuation|height|hyphenate-character|hyphenate-limit-chars|hyphens|image-orientation|image-rendering|ime-mode|inherits|initial-letter|initial-value|inline-size|inset|inset-block|inset-block-end|inset-block-start|inset-inline|inset-inline-end|inset-inline-start|isolation|justify-content|justify-items|justify-self|kerning|left|letter-spacing|lighting-color|line-break|line-gap-override|line-height|list-style|list-style-image|list-style-position|list-style-type|margin|margin-block|margin-block-end|margin-block-start|margin-bottom|margin-inline|margin-inline-end|margin-inline-start|margin-left|margin-right|margin-top|margin-trim|marker|marker-end|marker-mid|marker-start|mask|mask-border|mask-border-outset|mask-border-repeat|mask-border-slice|mask-border-source|mask-border-width|mask-clip|mask-composite|mask-image|mask-mode|mask-origin|mask-position|mask-position-x|mask-position-y|mask-repeat|mask-size|mask-type|math-depth|math-shift|math-style|max-block-size|max-height|max-inline-size|max-width|min-block-size|min-height|min-inline-size|min-width|mix-blend-mode|moz-animation|moz-animation-delay|moz-animation-direction|moz-animation-duration|moz-animation-fill-mode|moz-animation-iteration-count|moz-animation-name|moz-animation-play-state|moz-animation-timing-function|moz-appearance|moz-backface-visibility|moz-border-end|moz-border-end-color|moz-border-end-style|moz-border-end-width|moz-border-image|moz-border-start|moz-border-start-color|moz-border-start-style|moz-border-start-width|moz-box-align|moz-box-direction|moz-box-flex|moz-box-ordinal-group|moz-box-orient|moz-box-pack|moz-box-sizing|moz-float-edge|moz-font-feature-settings|moz-font-language-override|moz-force-broken-image-icon|moz-hyphens|moz-margin-end|moz-margin-start|moz-orient|moz-osx-font-smoothing|moz-padding-end|moz-padding-start|moz-perspective|moz-perspective-origin|moz-tab-size|moz-text-size-adjust|moz-transform|moz-transform-origin|moz-transform-style|moz-transition|moz-transition-delay|moz-transition-duration|moz-transition-property|moz-transition-timing-function|moz-user-input|moz-user-modify|moz-user-select|moz-window-dragging|negative|object-fit|object-position|object-view-box|offset|offset-anchor|offset-distance|offset-path|offset-position|offset-rotate|opacity|order|orphans|outline|outline-color|outline-offset|outline-style|outline-width|overflow|overflow-anchor|overflow-block|overflow-clip-margin|overflow-inline|overflow-wrap|overflow-x|overflow-y|overlay|override-colors|overscroll-behavior|overscroll-behavior-block|overscroll-behavior-inline|overscroll-behavior-x|overscroll-behavior-y|pad|padding|padding-block|padding-block-end|padding-block-start|padding-bottom|padding-inline|padding-inline-end|padding-inline-start|padding-left|padding-right|padding-top|page|page-break-after|page-break-before|page-break-inside|page-orientation|paint-order|perspective|perspective-origin|perspective-origin-x|perspective-origin-y|place-content|place-items|place-self|pointer-events|position|prefix|print-color-adjust|quotes|r|range|resize|right|rotate|row-gap|ruby-align|ruby-position|rx|ry|scale|scroll-behavior|scroll-margin|scroll-margin-block|scroll-margin-block-end|scroll-margin-block-start|scroll-margin-bottom|scroll-margin-inline|scroll-margin-inline-end|scroll-margin-inline-start|scroll-margin-left|scroll-margin-right|scroll-margin-top|scroll-padding|scroll-padding-block|scroll-padding-block-end|scroll-padding-block-start|scroll-padding-bottom|scroll-padding-inline|scroll-padding-inline-end|scroll-padding-inline-start|scroll-padding-left|scroll-padding-right|scroll-padding-top|scroll-snap-align|scroll-snap-margin|scroll-snap-margin-bottom|scroll-snap-margin-left|scroll-snap-margin-right|scroll-snap-margin-top|scroll-snap-stop|scroll-snap-type|scroll-timeline|scroll-timeline-axis|scroll-timeline-name|scrollbar-color|scrollbar-gutter|scrollbar-width|shape-image-threshold|shape-margin|shape-outside|shape-rendering|size|size-adjust|speak|speak-as|src|stop-color|stop-opacity|stroke|stroke-color|stroke-dasharray|stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|suffix|supported-color-schemes|symbols|syntax|system|tab-size|table-layout|text-align|text-align-last|text-anchor|text-combine-upright|text-decoration|text-decoration-color|text-decoration-line|text-decoration-skip|text-decoration-skip-ink|text-decoration-style|text-decoration-thickness|text-emphasis|text-emphasis-color|text-emphasis-position|text-emphasis-style|text-indent|text-justify|text-orientation|text-overflow|text-rendering|text-shadow|text-size-adjust|text-spacing-trim|text-transform|text-underline-offset|text-underline-position|text-wrap|text-wrap-mode|text-wrap-style|timeline-scope|top|touch-action|transform|transform-box|transform-origin|transform-origin-x|transform-origin-y|transform-origin-z|transform-style|transition|transition-behavior|transition-delay|transition-duration|transition-property|transition-timing-function|translate|unicode-bidi|unicode-range|user-select|vector-effect|vertical-align|view-timeline|view-timeline-axis|view-timeline-inset|view-timeline-name|view-transition-name|visibility|webkit-align-content|webkit-align-items|webkit-align-self|webkit-alt|webkit-animation|webkit-animation-delay|webkit-animation-direction|webkit-animation-duration|webkit-animation-fill-mode|webkit-animation-iteration-count|webkit-animation-name|webkit-animation-play-state|webkit-animation-timing-function|webkit-app-region|webkit-appearance|webkit-backdrop-filter|webkit-backface-visibility|webkit-background-clip|webkit-background-origin|webkit-background-size|webkit-border-after|webkit-border-after-color|webkit-border-after-style|webkit-border-after-width|webkit-border-before|webkit-border-before-color|webkit-border-before-style|webkit-border-before-width|webkit-border-bottom-left-radius|webkit-border-bottom-right-radius|webkit-border-end|webkit-border-end-color|webkit-border-end-style|webkit-border-end-width|webkit-border-horizontal-spacing|webkit-border-image|webkit-border-radius|webkit-border-start|webkit-border-start-color|webkit-border-start-style|webkit-border-start-width|webkit-border-top-left-radius|webkit-border-top-right-radius|webkit-border-vertical-spacing|webkit-box-align|webkit-box-decoration-break|webkit-box-direction|webkit-box-flex|webkit-box-flex-group|webkit-box-lines|webkit-box-ordinal-group|webkit-box-orient|webkit-box-pack|webkit-box-reflect|webkit-box-shadow|webkit-box-sizing|webkit-clip-path|webkit-column-axis|webkit-column-break-after|webkit-column-break-before|webkit-column-break-inside|webkit-column-count|webkit-column-fill|webkit-column-gap|webkit-column-progression|webkit-column-rule|webkit-column-rule-color|webkit-column-rule-style|webkit-column-rule-width|webkit-column-span|webkit-column-width|webkit-columns|webkit-cursor-visibility|webkit-filter|webkit-flex|webkit-flex-basis|webkit-flex-direction|webkit-flex-flow|webkit-flex-grow|webkit-flex-shrink|webkit-flex-wrap|webkit-font-feature-settings|webkit-font-kerning|webkit-font-smoothing|webkit-hyphenate-character|webkit-hyphenate-limit-after|webkit-hyphenate-limit-before|webkit-hyphenate-limit-lines|webkit-hyphens|webkit-initial-letter|webkit-justify-content|webkit-justify-items|webkit-line-align|webkit-line-box-contain|webkit-line-break|webkit-line-clamp|webkit-line-grid|webkit-line-snap|webkit-locale|webkit-logical-height|webkit-logical-width|webkit-margin-after|webkit-margin-before|webkit-margin-end|webkit-margin-start|webkit-mask|webkit-mask-box-image|webkit-mask-box-image-outset|webkit-mask-box-image-repeat|webkit-mask-box-image-slice|webkit-mask-box-image-source|webkit-mask-box-image-width|webkit-mask-clip|webkit-mask-composite|webkit-mask-image|webkit-mask-origin|webkit-mask-position|webkit-mask-position-x|webkit-mask-position-y|webkit-mask-repeat|webkit-mask-repeat-x|webkit-mask-repeat-y|webkit-mask-size|webkit-mask-source-type|webkit-max-logical-height|webkit-max-logical-width|webkit-min-logical-height|webkit-min-logical-width|webkit-nbsp-mode|webkit-opacity|webkit-order|webkit-padding-after|webkit-padding-before|webkit-padding-end|webkit-padding-start|webkit-perspective|webkit-perspective-origin|webkit-perspective-origin-x|webkit-perspective-origin-y|webkit-print-color-adjust|webkit-rtl-ordering|webkit-ruby-position|webkit-shape-image-threshold|webkit-shape-margin|webkit-shape-outside|webkit-tap-highlight-color|webkit-text-combine|webkit-text-decoration|webkit-text-decoration-color|webkit-text-decoration-line|webkit-text-decoration-skip|webkit-text-decoration-style|webkit-text-decorations-in-effect|webkit-text-emphasis|webkit-text-emphasis-color|webkit-text-emphasis-position|webkit-text-emphasis-style|webkit-text-fill-color|webkit-text-orientation|webkit-text-security|webkit-text-size-adjust|webkit-text-stroke|webkit-text-stroke-color|webkit-text-stroke-width|webkit-text-underline-position|webkit-text-zoom|webkit-transform|webkit-transform-origin|webkit-transform-origin-x|webkit-transform-origin-y|webkit-transform-origin-z|webkit-transform-style|webkit-transition|webkit-transition-delay|webkit-transition-duration|webkit-transition-property|webkit-transition-timing-function|webkit-user-drag|webkit-user-modify|webkit-user-select|webkit-writing-mode|white-space|white-space-collapse|widows|width|will-change|word-break|word-spacing|word-wrap|writing-mode|x|y|z-index|zoom)(?:[\\w\\-\\.#]+|\\\\.[a-z][\\w\\-]*)",
                    "end": "(?=@|\\\\})",
                    "name": "entity.name.tag.custom-property.name.bcss root-custom-property.bcss",
                    "patterns": [
                        {
                            "include": "#bcss-css-property-selector-only"
                        }
                    ]
                },
                {
                    "begin": "(?=(?!<[\\w\\-])accent-color|additive-symbols|align-content|align-items|align-self|alignment-baseline|all|alt|animation|animation-composition|animation-delay|animation-direction|animation-duration|animation-fill-mode|animation-iteration-count|animation-name|animation-play-state|animation-range|animation-range-end|animation-range-start|animation-timeline|animation-timing-function|app-region|appearance|apple-pay-button-style|apple-pay-button-type|ascent-override|aspect-ratio|backdrop-filter|backface-visibility|background|background-attachment|background-blend-mode|background-clip|background-color|background-image|background-origin|background-position|background-position-x|background-position-y|background-repeat|background-repeat-x|background-repeat-y|background-size|base-palette|baseline-shift|baseline-source|block-size|border|border-block|border-block-color|border-block-end|border-block-end-color|border-block-end-style|border-block-end-width|border-block-start|border-block-start-color|border-block-start-style|border-block-start-width|border-block-style|border-block-width|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius|border-bottom-style|border-bottom-width|border-collapse|border-color|border-end-end-radius|border-end-start-radius|border-image|border-image-outset|border-image-repeat|border-image-slice|border-image-source|border-image-width|border-inline|border-inline-color|border-inline-end|border-inline-end-color|border-inline-end-style|border-inline-end-width|border-inline-start|border-inline-start-color|border-inline-start-style|border-inline-start-width|border-inline-style|border-inline-width|border-left|border-left-color|border-left-style|border-left-width|border-radius|border-right|border-right-color|border-right-style|border-right-width|border-spacing|border-start-end-radius|border-start-start-radius|border-style|border-top|border-top-color|border-top-left-radius|border-top-right-radius|border-top-style|border-top-width|border-width|bottom|box-decoration-break|box-shadow|box-sizing|break-after|break-before|break-inside|buffered-rendering|caption-side|caret-color|clear|clip|clip-path|clip-rule|color|color-adjust|color-interpolation|color-interpolation-filters|color-rendering|color-scheme|column-count|column-fill|column-gap|column-rule|column-rule-color|column-rule-style|column-rule-width|column-span|column-width|columns|contain|contain-intrinsic-block-size|contain-intrinsic-height|contain-intrinsic-inline-size|contain-intrinsic-size|contain-intrinsic-width|container|container-name|container-type|content|content-visibility|counter-increment|counter-reset|counter-set|css-float|css-rules|cursor|cx|cy|d|descent-override|direction|display|dominant-baseline|empty-cells|epub-caption-side|epub-hyphens|epub-text-combine|epub-text-emphasis|epub-text-emphasis-color|epub-text-emphasis-style|epub-text-orientation|epub-text-transform|epub-word-break|epub-writing-mode|fallback|field-sizing|fill|fill-opacity|fill-rule|filter|flex|flex-basis|flex-direction|flex-flow|flex-grow|flex-shrink|flex-wrap|float|flood-color|flood-opacity|font|font-display|font-family|font-feature-settings|font-kerning|font-language-override|font-optical-sizing|font-palette|font-size|font-size-adjust|font-stretch|font-style|font-synthesis|font-synthesis-position|font-synthesis-small-caps|font-synthesis-style|font-synthesis-weight|font-variant|font-variant-alternates|font-variant-caps|font-variant-east-asian|font-variant-ligatures|font-variant-numeric|font-variant-position|font-variation-settings|font-weight|forced-color-adjust|gap|glyph-orientation-horizontal|glyph-orientation-vertical|grid|grid-area|grid-auto-columns|grid-auto-flow|grid-auto-rows|grid-column|grid-column-end|grid-column-gap|grid-column-start|grid-gap|grid-row|grid-row-end|grid-row-gap|grid-row-start|grid-template|grid-template-areas|grid-template-columns|grid-template-rows|hanging-punctuation|height|hyphenate-character|hyphenate-limit-chars|hyphens|image-orientation|image-rendering|ime-mode|inherits|initial-letter|initial-value|inline-size|inset|inset-block|inset-block-end|inset-block-start|inset-inline|inset-inline-end|inset-inline-start|isolation|justify-content|justify-items|justify-self|kerning|left|letter-spacing|lighting-color|line-break|line-gap-override|line-height|list-style|list-style-image|list-style-position|list-style-type|margin|margin-block|margin-block-end|margin-block-start|margin-bottom|margin-inline|margin-inline-end|margin-inline-start|margin-left|margin-right|margin-top|margin-trim|marker|marker-end|marker-mid|marker-start|mask|mask-border|mask-border-outset|mask-border-repeat|mask-border-slice|mask-border-source|mask-border-width|mask-clip|mask-composite|mask-image|mask-mode|mask-origin|mask-position|mask-position-x|mask-position-y|mask-repeat|mask-size|mask-type|math-depth|math-shift|math-style|max-block-size|max-height|max-inline-size|max-width|min-block-size|min-height|min-inline-size|min-width|mix-blend-mode|moz-animation|moz-animation-delay|moz-animation-direction|moz-animation-duration|moz-animation-fill-mode|moz-animation-iteration-count|moz-animation-name|moz-animation-play-state|moz-animation-timing-function|moz-appearance|moz-backface-visibility|moz-border-end|moz-border-end-color|moz-border-end-style|moz-border-end-width|moz-border-image|moz-border-start|moz-border-start-color|moz-border-start-style|moz-border-start-width|moz-box-align|moz-box-direction|moz-box-flex|moz-box-ordinal-group|moz-box-orient|moz-box-pack|moz-box-sizing|moz-float-edge|moz-font-feature-settings|moz-font-language-override|moz-force-broken-image-icon|moz-hyphens|moz-margin-end|moz-margin-start|moz-orient|moz-osx-font-smoothing|moz-padding-end|moz-padding-start|moz-perspective|moz-perspective-origin|moz-tab-size|moz-text-size-adjust|moz-transform|moz-transform-origin|moz-transform-style|moz-transition|moz-transition-delay|moz-transition-duration|moz-transition-property|moz-transition-timing-function|moz-user-input|moz-user-modify|moz-user-select|moz-window-dragging|negative|object-fit|object-position|object-view-box|offset|offset-anchor|offset-distance|offset-path|offset-position|offset-rotate|opacity|order|orphans|outline|outline-color|outline-offset|outline-style|outline-width|overflow|overflow-anchor|overflow-block|overflow-clip-margin|overflow-inline|overflow-wrap|overflow-x|overflow-y|overlay|override-colors|overscroll-behavior|overscroll-behavior-block|overscroll-behavior-inline|overscroll-behavior-x|overscroll-behavior-y|pad|padding|padding-block|padding-block-end|padding-block-start|padding-bottom|padding-inline|padding-inline-end|padding-inline-start|padding-left|padding-right|padding-top|page|page-break-after|page-break-before|page-break-inside|page-orientation|paint-order|perspective|perspective-origin|perspective-origin-x|perspective-origin-y|place-content|place-items|place-self|pointer-events|position|prefix|print-color-adjust|quotes|r|range|resize|right|rotate|row-gap|ruby-align|ruby-position|rx|ry|scale|scroll-behavior|scroll-margin|scroll-margin-block|scroll-margin-block-end|scroll-margin-block-start|scroll-margin-bottom|scroll-margin-inline|scroll-margin-inline-end|scroll-margin-inline-start|scroll-margin-left|scroll-margin-right|scroll-margin-top|scroll-padding|scroll-padding-block|scroll-padding-block-end|scroll-padding-block-start|scroll-padding-bottom|scroll-padding-inline|scroll-padding-inline-end|scroll-padding-inline-start|scroll-padding-left|scroll-padding-right|scroll-padding-top|scroll-snap-align|scroll-snap-margin|scroll-snap-margin-bottom|scroll-snap-margin-left|scroll-snap-margin-right|scroll-snap-margin-top|scroll-snap-stop|scroll-snap-type|scroll-timeline|scroll-timeline-axis|scroll-timeline-name|scrollbar-color|scrollbar-gutter|scrollbar-width|shape-image-threshold|shape-margin|shape-outside|shape-rendering|size|size-adjust|speak|speak-as|src|stop-color|stop-opacity|stroke|stroke-color|stroke-dasharray|stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|suffix|supported-color-schemes|symbols|syntax|system|tab-size|table-layout|text-align|text-align-last|text-anchor|text-combine-upright|text-decoration|text-decoration-color|text-decoration-line|text-decoration-skip|text-decoration-skip-ink|text-decoration-style|text-decoration-thickness|text-emphasis|text-emphasis-color|text-emphasis-position|text-emphasis-style|text-indent|text-justify|text-orientation|text-overflow|text-rendering|text-shadow|text-size-adjust|text-spacing-trim|text-transform|text-underline-offset|text-underline-position|text-wrap|text-wrap-mode|text-wrap-style|timeline-scope|top|touch-action|transform|transform-box|transform-origin|transform-origin-x|transform-origin-y|transform-origin-z|transform-style|transition|transition-behavior|transition-delay|transition-duration|transition-property|transition-timing-function|translate|unicode-bidi|unicode-range|user-select|vector-effect|vertical-align|view-timeline|view-timeline-axis|view-timeline-inset|view-timeline-name|view-transition-name|visibility|webkit-align-content|webkit-align-items|webkit-align-self|webkit-alt|webkit-animation|webkit-animation-delay|webkit-animation-direction|webkit-animation-duration|webkit-animation-fill-mode|webkit-animation-iteration-count|webkit-animation-name|webkit-animation-play-state|webkit-animation-timing-function|webkit-app-region|webkit-appearance|webkit-backdrop-filter|webkit-backface-visibility|webkit-background-clip|webkit-background-origin|webkit-background-size|webkit-border-after|webkit-border-after-color|webkit-border-after-style|webkit-border-after-width|webkit-border-before|webkit-border-before-color|webkit-border-before-style|webkit-border-before-width|webkit-border-bottom-left-radius|webkit-border-bottom-right-radius|webkit-border-end|webkit-border-end-color|webkit-border-end-style|webkit-border-end-width|webkit-border-horizontal-spacing|webkit-border-image|webkit-border-radius|webkit-border-start|webkit-border-start-color|webkit-border-start-style|webkit-border-start-width|webkit-border-top-left-radius|webkit-border-top-right-radius|webkit-border-vertical-spacing|webkit-box-align|webkit-box-decoration-break|webkit-box-direction|webkit-box-flex|webkit-box-flex-group|webkit-box-lines|webkit-box-ordinal-group|webkit-box-orient|webkit-box-pack|webkit-box-reflect|webkit-box-shadow|webkit-box-sizing|webkit-clip-path|webkit-column-axis|webkit-column-break-after|webkit-column-break-before|webkit-column-break-inside|webkit-column-count|webkit-column-fill|webkit-column-gap|webkit-column-progression|webkit-column-rule|webkit-column-rule-color|webkit-column-rule-style|webkit-column-rule-width|webkit-column-span|webkit-column-width|webkit-columns|webkit-cursor-visibility|webkit-filter|webkit-flex|webkit-flex-basis|webkit-flex-direction|webkit-flex-flow|webkit-flex-grow|webkit-flex-shrink|webkit-flex-wrap|webkit-font-feature-settings|webkit-font-kerning|webkit-font-smoothing|webkit-hyphenate-character|webkit-hyphenate-limit-after|webkit-hyphenate-limit-before|webkit-hyphenate-limit-lines|webkit-hyphens|webkit-initial-letter|webkit-justify-content|webkit-justify-items|webkit-line-align|webkit-line-box-contain|webkit-line-break|webkit-line-clamp|webkit-line-grid|webkit-line-snap|webkit-locale|webkit-logical-height|webkit-logical-width|webkit-margin-after|webkit-margin-before|webkit-margin-end|webkit-margin-start|webkit-mask|webkit-mask-box-image|webkit-mask-box-image-outset|webkit-mask-box-image-repeat|webkit-mask-box-image-slice|webkit-mask-box-image-source|webkit-mask-box-image-width|webkit-mask-clip|webkit-mask-composite|webkit-mask-image|webkit-mask-origin|webkit-mask-position|webkit-mask-position-x|webkit-mask-position-y|webkit-mask-repeat|webkit-mask-repeat-x|webkit-mask-repeat-y|webkit-mask-size|webkit-mask-source-type|webkit-max-logical-height|webkit-max-logical-width|webkit-min-logical-height|webkit-min-logical-width|webkit-nbsp-mode|webkit-opacity|webkit-order|webkit-padding-after|webkit-padding-before|webkit-padding-end|webkit-padding-start|webkit-perspective|webkit-perspective-origin|webkit-perspective-origin-x|webkit-perspective-origin-y|webkit-print-color-adjust|webkit-rtl-ordering|webkit-ruby-position|webkit-shape-image-threshold|webkit-shape-margin|webkit-shape-outside|webkit-tap-highlight-color|webkit-text-combine|webkit-text-decoration|webkit-text-decoration-color|webkit-text-decoration-line|webkit-text-decoration-skip|webkit-text-decoration-style|webkit-text-decorations-in-effect|webkit-text-emphasis|webkit-text-emphasis-color|webkit-text-emphasis-position|webkit-text-emphasis-style|webkit-text-fill-color|webkit-text-orientation|webkit-text-security|webkit-text-size-adjust|webkit-text-stroke|webkit-text-stroke-color|webkit-text-stroke-width|webkit-text-underline-position|webkit-text-zoom|webkit-transform|webkit-transform-origin|webkit-transform-origin-x|webkit-transform-origin-y|webkit-transform-origin-z|webkit-transform-style|webkit-transition|webkit-transition-delay|webkit-transition-duration|webkit-transition-property|webkit-transition-timing-function|webkit-user-drag|webkit-user-modify|webkit-user-select|webkit-writing-mode|white-space|white-space-collapse|widows|width|will-change|word-break|word-spacing|word-wrap|writing-mode|x|y|z-index|zoom(?![\\w\\-]))",
                    "end": "(?=@|\\\\}|:)",
                    "name": "support.type.property-name.bcss css.property.bcss",
                    "patterns": [
                        {
                            "include": "#bcss-css-property-selector-only"
                        }
                    ]
                },
                {
                    "begin": "(?!<[\\w\\-])[a-z][a-z0-9-]*",
                    "end": "(?=@|\\\\})",
                    "name": "entity.name.tag.custom-property.name.bcss fallback.prop.bcss",
                    "patterns": [
                        {
                            "include": "#bcss-css-property-selector-only"
                        }
                    ]
                }
            ]
        },
        "bcss-css-not-css-property": {
            "patterns": [
                {
                    "begin": "(?!\\b(zoom|z-index)\\b[a-z0-9]+)",
                    "end": " (?=\\\\})",
                    "name": "entity.name.tag.custom-tag.bcss custom-tag.bcss",
                    "patterns": [
                        {
                            "include": "#bcss-css-selector-only"
                        },
                        {
                            "include": "#bcss-css-property-selector-only"
                        }
                    ]
                }
            ]
        },
        "bcss-root-css-global-property": {
            "begin": "(?:-(?:\\b(?:epub-text-emphasis(?:-color|-style)|epub-text-emphasis|moz-animation(?:-delay|-direction|-duration|-fill-mode|-iteration-count|-name|-play-state|-timing-function)|moz-animation|moz-border-end(?:-color|-style|-width)|moz-border-end|moz-border-start(?:-color|-style|-width)|moz-border-start|moz-perspective(?:-origin)|moz-perspective|moz-transform(?:-origin|-style)|moz-transform|moz-transition(?:-delay|-duration|-property|-timing-function)|moz-transition|webkit-animation(?:-delay|-direction|-duration|-fill-mode|-iteration-count|-name|-play-state|-timing-function)|webkit-animation|webkit-border-after(?:-color|-style|-width)|webkit-border-after|webkit-border-before(?:-color|-style|-width)|webkit-border-before|webkit-border-end(?:-color|-style|-width)|webkit-border-end|webkit-border-start(?:-color|-style|-width)|webkit-border-start|webkit-box-flex(?:-group)|webkit-box-flex|webkit-column-rule(?:-color|-style|-width)|webkit-column-rule|webkit-flex(?:-basis|-direction|-flow|-grow|-shrink|-wrap)|webkit-flex|webkit-mask(?:-clip|-composite|-image|-origin|-repeat|-size|-source-type)|webkit-mask|webkit-mask-position(?:-x|-y)|webkit-mask-position|webkit-mask(?:-box-image(?:-outset|-repeat|-slice|-source|-width))|webkit-mask|webkit-perspective|webkit-perspective(?:-origin(?:-x|-y))|webkit-perspective|webkit-text-decoration(?:-color|-line|-skip|-style|s-in-effect)|webkit-text-decoration|webkit-text-emphasis(?:-color|-position|-style)|webkit-text-emphasis|webkit-text-stroke(?:-color|-width)|webkit-text-stroke|webkit-transform(?:-style)|webkit-transform|webkit-transform(?:-origin(?:-x|-y|-z))|webkit-transform|webkit-transition(?:-delay|-duration|-property|-timing-function)|webkit-transition)\\b)|\\b(?:animation(?:-composition|-delay|-direction|-duration|-fill-mode|-iteration-count|-name|-play-state|-timeline|-timing-function)|animation|animation(?:-range(?:-end|-start))|animation|background(?:-attachment|-blend-mode|-clip|-color|-image|-origin|-size)|background|background-repeat(?:-x|-y)|background-repeat|background(?:-position(?:-x|-y))|background|border(?:-collapse|-color|-end-end-radius|-end-start-radius|-radius|-spacing|-start-end-radius|-start-start-radius|-style|-width)|border|border-top(?:-color|-left-radius|-right-radius|-style|-width)|border-top|border-right(?:-color|-style|-width)|border-right|border-left(?:-color|-style|-width)|border-left|border-inline(?:-color|-style|-width)|border-inline|border-inline-start(?:-color|-style|-width)|border-inline-start|border-inline(?:-end(?:-color|-style|-width))|border-inline|border-image|border-bottom|border-block|border-block-start(?:-color|-style|-width)|border-block-start|border-block(?:-end(?:-color|-style|-width))|border-block|border(?:-block(?:-color|-style|-width|-outset|-repeat|-slice|-source|-width|-color|-left-radius|-right-radius|-style|-width|-color|-style|-width))|border|clip(?:-path|-rule)|clip|color(?:-adjust|-rendering|-scheme)|color|color(?:-interpolation(?:-filters))|color|column-rule(?:-color|-style|-width)|column-rule|contain(?:-intrinsic-block-size|-intrinsic-height|-intrinsic-inline-size|-intrinsic-size|-intrinsic-width)|contain|contain(?:er(?:-name|-type))|contain|content(?:-visibility)|content|d(?:escent-overrie|irection|isplay|ominant-baseline)|d|epub-text-emphasis(?:-color|-style)|epub-text-emphasis|fill(?:-opacity|-rule)|fill|flex(?:-basis|-direction|-flow|-grow|-shrink|-wrap)|flex|font(?:-display|-family|-feature-settings|-kerning|-language-override|-optical-sizing|-palette|-stretch|-style|-variation-settings|-weight)|font|font-variant(?:-alternates|-caps|-east-asian|-ligatures|-numeric|-position)|font-variant|font-synthesis(?:-position|-small-caps|-style|-weight)|font-synthesis|font(?:-size(?:-adjust))|font|grid(?:-area|-auto-columns|-auto-flow|-auto-rows|-gap)|grid|grid-template(?:-areas|-columns|-rows)|grid-template|grid-row(?:-end|-gap|-start)|grid-row|grid(?:-column(?:-end|-gap|-start))|grid|inset|inset-inline(?:-end|-start)|inset-inline|inset(?:-block(?:-end|-start))|inset|list-style(?:-image|-position|-type)|list-style|margin(?:-bottom|-left|-right|-top|-trim)|margin|margin-inline(?:-end|-start)|margin-inline|margin(?:-block(?:-end|-start))|margin|marker(?:-end|-mid|-start)|marker|mask(?:-clip|-composite|-image|-mode|-origin|-repeat|-size|-type)|mask|mask-position(?:-x|-y)|mask-position|mask(?:-border(?:-outset|-repeat|-slice|-source|-width))|mask|moz-animation(?:-delay|-direction|-duration|-fill-mode|-iteration-count|-name|-play-state|-timing-function)|moz-animation|moz-border-end(?:-color|-style|-width)|moz-border-end|moz-border-start(?:-color|-style|-width)|moz-border-start|moz-perspective(?:-origin)|moz-perspective|moz-transform(?:-origin|-style)|moz-transform|moz-transition(?:-delay|-duration|-property|-timing-function)|moz-transition|offset(?:-anchor|-distance|-path|-position|-rotate)|offset|outline(?:-color|-offset|-style|-width)|outline|overflow(?:-anchor|-block|-clip-margin|-inline|-wrap|-x|-y)|overflow|overscroll-behavior(?:-block|-inline|-x|-y)|overscroll-behavior|pad|padding(?:-bottom|-left|-right|-top)|padding|padding-inline(?:-end|-start)|padding-inline|padding(?:-block(?:-end|-start))|padding|pad(?:ding(?:-end|-start))|pad|page(?:-break-after|-break-before|-break-inside|-orientation)|page|perspective|perspective(?:-origin(?:-x|-y))|perspective|r(?:ange|esize|ight|otate|ow-gap|uby-align|uby-position|x|y)|r|scroll-margin(?:-bottom|-left|-right|-top)|scroll-margin|scroll-margin-inline(?:-end|-start)|scroll-margin-inline|scroll-margin(?:-block(?:-end|-start))|scroll-margin|scroll-padding(?:-bottom|-left|-right|-top)|scroll-padding|scroll-padding-inline(?:-end|-start)|scroll-padding-inline|scroll-padding(?:-block(?:-end|-start))|scroll-padding|scroll-snap-margin(?:-bottom|-left|-right|-top)|scroll-snap-margin|scroll-timeline(?:-axis|-name)|scroll-timeline|size(?:-adjust)|size|speak(?:-as)|speak|stroke(?:-color|-dasharray|-dashoffset|-linecap|-linejoin|-miterlimit|-opacity|-width)|stroke|text-align(?:-last)|text-align|text-decoration(?:-color|-line|-style|-thickness)|text-decoration|text-decoration(?:-skip(?:-ink))|text-decoration|text-emphasis(?:-color|-position|-style)|text-emphasis|text-wrap(?:-mode|-style)|text-wrap|transform(?:-box|-style)|transform|transform(?:-origin(?:-x|-y|-z))|transform|transition(?:-behavior|-delay|-duration|-property|-timing-function)|transition|view-timeline(?:-axis|-inset|-name)|view-timeline|webkit-animation(?:-delay|-direction|-duration|-fill-mode|-iteration-count|-name|-play-state|-timing-function)|webkit-animation|webkit-border-after(?:-color|-style|-width)|webkit-border-after|webkit-border-before(?:-color|-style|-width)|webkit-border-before|webkit-border-end(?:-color|-style|-width)|webkit-border-end|webkit-border-start(?:-color|-style|-width)|webkit-border-start|webkit-box-flex(?:-group)|webkit-box-flex|webkit-column-rule(?:-color|-style|-width)|webkit-column-rule|webkit-flex(?:-basis|-direction|-flow|-grow|-shrink|-wrap)|webkit-flex|webkit-mask(?:-clip|-composite|-image|-origin|-size|-source-type)|webkit-mask|webkit-mask-repeat(?:-x|-y)|webkit-mask-repeat|webkit-mask-position(?:-x|-y)|webkit-mask-position|webkit-mask(?:-box-image(?:-outset|-repeat|-slice|-source|-width))|webkit-mask|webkit-perspective|webkit-perspective(?:-origin(?:-x|-y))|webkit-perspective|webkit-text-decoration(?:-color|-line|-skip|-style|s-in-effect)|webkit-text-decoration|webkit-text-emphasis(?:-color|-position|-style)|webkit-text-emphasis|webkit-text-stroke(?:-color|-width)|webkit-text-stroke|webkit-transform(?:-style)|webkit-transform|webkit-transform(?:-origin(?:-x|-y|-z))|webkit-transform|webkit-transition(?:-delay|-duration|-property|-timing-function)|webkit-transition|white-space(?:-collapse)|white-space)\\b)$",
            "end": "(?=\\}|:|@)",
            "name": "--final",
            "patterns": [
                {
                    "include": "#bcss-css-property-selector-only"
                }
            ]
        },
        "bcss-root-media-property": {
            "begin": "(?=(?:-+|\\.|#)?[a-z][a-z0-9\\-]*(?:\\\\.([a-z][a-z0-9\\-]*)*)*((?:\\.|#)([a-z][a-z0-9\\-]*)*)*)*",
            "end": "(?=@|\\})",
            "name": "root-media",
            "patterns": [
                {
                    "include": "#bcss-css-root-css-property"
                },
                {
                    "include": "#bcss-css-custom-property"
                },
                {
                    "include": "#bcss-css-root-id-class"
                },
                {
                    "include": "#bcss-css-root-tag-property"
                },
                {
                    "include": "#css-value-defs"
                }
            ]
        }
    },
    "lintErrors": {
        "101": "invalid syntax"
    },
    "patterns": [
        {
            "include": "#bcss-region-block--"
        },
        {
            "include": "#bcss-root-media-property--"
        },
        {
            "begin":"if",
            "end":"",
            "name":"invalid.data",
            "patterns":[{
                "match":"(?=;)"
            }]
        }
    ]
}