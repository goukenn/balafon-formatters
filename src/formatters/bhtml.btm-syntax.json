{

    "$schema": "https://igkdev.com/schemas/btm-syntax.json",
    "settings": {
        "noSpaceJoin": true,
        "transfromEngine": "html"
    },
    "comment": "balafon framework html entities",
    "author": "C.A.D BONDJE DOUE",
    "repository": {
        "html-space-constant": {
            "match": "\\s+",
            "name": "constant.empty.space.html",
            "replaceWith": " "
        },
        "string": {
            "begin": "(\"|')",
            "end": "\\1",
            "name": "string.definition",
            "allowMultiline": false,
            "tokenID": "string",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "escaped.char"
                }
            ]
        },
        "string-named": {
            "begin": "(\"|')",
            "end": "\\1",
            "name": "string.definition.with.name",
            "allowMultiline": false,
            "tokenID": "string",
            "patterns": [
                {
                    "match": "(?i)\\bbondje\\b",
                    "name": "author.name",
                    "transform": [
                        "upperCase"
                    ]
                },
                {
                    "match": "\\\\.",
                    "name": "escaped.char"
                }
            ]
        },
        "url": {
            "match": "(?i)(?<scheme>(?:ftp|http(?:s)|[a-z]+)):(?:\\/\\/|\\/|)(?<path>(?:\\/|\\.\\.(?:\\/)?|\\.(?:\\/)?)[^\\/\\)\\(]+(?:\\/|\/[^\\/\\)\\()\\;]+))(?:;(?<queryo>[^\\?\\#]+))?(?:\\?(?<query>[^\\#]+))?(?:(?<anchor>#.+))?",
            "name": "url.text",
            "tokenID": "url",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "escaped.char"
                }
            ]
        },
        "tag-definition": {
            "begin": "\\<(\\b[\\w]+\\b)",
            "end": "(\\/|\\<\\/\\1\\s*)?\\>",
            "name": "tag.definition.html",
            "tokenID": "tagname",
            "isBlock": false,
            "endCaptures": {
                "0": {
                    "comment": "remove not used white space",
                    "match": "<\\/([\\w]+)\\s+\\>",
                    "replaceWith": "\\<\\/$1\\>"
                }
            },
            "patterns": [
                {
                    "include": "#end-tag"
                },
                {
                    "match": "(?=\\<\\/[\\w]+\\>)",
                    "name": "end.tag.block.html",
                    "tokenID": "endtag.block"
                },
                {
                    "match": "(?:\\>)",
                    "name": "start.html.end.block.html",
                    "updateParentProps": {
                        "isBlock": true
                    }
                },
                {
                    "match": "(\\/\\>)",
                    "name": "start.empty.html.block.html",
                    "tokenID": "endtag.block",
                    "formattingMode": 1,
                    "updateParentProps": {
                        "isBlock": true
                    }
                },
                {
                    "include": "#html-attribute"
                },
                {
                    "include": "#function-html-attribute"
                },
                {
                    "include": "#bracket-html-attribute"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#operator"
                }
            ],
            "updateParentProps": {
                "isBlock": true
            }
        },
        "empty-tag": {
            "begin": "\\<([\\w]+)\\s*\\/\\>",
            "end": "(?:>)",
            "formattingMode": 1,
            "tokenID": "empty.tag",
            "name": "empty.tag.definition.html",
            "updateParentProps": {
                "isBlock": true
            }
        },
        "operator": {
            "match": "\\s*(\\+|\\*|-|%|=)\\s*",
            "name": "tag.operator.html",
            "tokenID": "tag.operator",
            "replaceWith": "$1",
            "nextTrimWhiteSpace": true
        },
        "comment": {
            "begin": "\\<\\!--",
            "end": "--\\>",
            "tokenID": "comment",
            "name": "comment.html",
            "formattingMode": 1
        },
        "doctype": {
            "begin": "\\<!DOCTYPE",
            "end": "\\>",
            "tokenID": "doctype",
            "name": "constant.doctype.html",
            "formattingMode": 1,
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#url"
                }
            ]
        },
        "processor-expression": {
            "begin": "\\<\\?[\\w]+",
            "end": "\\?>",
            "tokenID": "processor",
            "name": "constant.processor.html",
            "formattingMode": 1,
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#url"
                }
            ]
        },
        "end-tag": {
            "begin": "\\<\\/[\\w]+(\\s+|$)",
            "end": "\\>",
            "tokenID": "detect-bad-end.tag",
            "name": "end.tag.definition.html",
            "comment": "detect non well formed end tags",
            "nextTrimWhiteSpace": true,
            "endCaptures": {
                "0": {
                    "nextTrimWhiteSpace": true
                }
            }
        },
        "html-attribute": {
            "match": "(\\*)?\\b[\\w]+\\b",
            "name": "storage.tag.attribute.html"
        },
        "bracket-html-attribute": {
            "match": "\\[\\s*(\\*)?([\\w]+([\\-\\w]+)?)\\s*\\]",
            "name": "tag.bracket.attribute.html"
        },
        "function-html-attribute": {
            "match": "\\[\\s*\\b[\\w]+\\b\\*\\]",
            "name": "tag.function.attribute.html"
        },
        "global-self-closing-html-tag": {
            "begin": "(<)(img|link|br)\\b",
            "end": "(\\/)?>",
            "comment": "image tag must be consider as a global self closing element",
            "name": "auto.closing.tag.html",
            "beginCaptures": {
                "1": {
                    "name": "start.bracket.tag.bhtml"
                },
                "2": {
                    "name": "tagname.html"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "end.capture",
                    "patterns": [
                        {
                            "match": ">",
                            "replaceWith": "/>",
                            "name": "detect.missing.close.tag.html",
                            "captures": {
                                "0": {
                                    "name": "symbol.end.tag.html"
                                }
                            }
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#html-attribute"
                }
            ]
        },
        "inner-html-block": {
            "begin": "(\\<)\\b([\\w]+(?:[0-9\\w_\\-]+)?(?:[\\w]+[\\w\\-0-9]+)?)\\b",
            "end": "\\s*\\/\\>|\\<\\/\\2\\s*>",
            "name": "entity.name.function.inner.html.tag.html",
            "beginCaptures": {
                "1": {
                    "name": "start.bracket.tag.bhtml"
                },
                "2": {
                    "name": "tagname.html"
                }
            },
            "patterns": [
                {
                    "include": "#php-embedded"
                },
                {
                    "include": "#end-html-bracket"
                },
                {
                    "include": "#block-inner-def"
                }
            ],
            "updateParentProps": {
                "isBlock": true
            },
            "formattingMode": 1
        },
        "block-inner-def": {
            "patterns": [
                {
                    "include": "#php-embed-inline"
                },
                {
                    "include": "#attribe-ref"
                },
                {
                    "include": "#inner-html-block"
                }
            ]
        },
        "attribe-ref": {
            "patterns": [
                {
                    "match": "\\s+",
                    "name": "attrib.space.def",
                    "replaceWith": " "
                },
                {
                    "match": "\\s+(?=>)",
                    "name": "attrib.space.def",
                    "replaceWith": ""
                },
                {
                    "include": "#bracket-html-attribute"
                },
                {
                    "include": "#html-attribute"
                },
                {
                    "include": "#function-html-attribute"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#operator"
                }
            ]
        },
        "inner-html-bck": {
            "begin": "(\\>)",
            "end": "(?=\\<(?:\\/)?)",
            "name": "inner.html",
            "comment": "Detect inner content. start block definition if contains global.html.tag.html",
            "requestParentBlockCondition": "child.name == global.html.tag.html",
            "updateParentProps": {
                "isBlock": true
            },
            "beginCaptures": {
                "0": {
                    "name": "start.inner.html"
                },
                "1": {
                    "name": "symbol.inner.end.tag.html"
                }
            },
            "patterns": [
                {
                    "include": "#global-self-closing-html-tag"
                },
                {
                    "include": "#global-html-tag"
                },
                {
                    "include": "#html-space-constant"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#url"
                },
                {
                    "include": "#detect-end-closetag"
                }
            ]
        },
        "global-html-tag": {
            "begin": "(\\<)\\b([a-zA-Z]+(?:[0-9a-zA-Z\\-]+)?(?:[a-zA-Z]+[a-zA-Z\\-0-9]+)?)\\b",
            "end": "\\s*\\/\\>|\\<\\/\\2\\s*>",
            "name": "entity.name.type.global.html.tag.html",
            "beginCaptures": {
                "1": {
                    "name": "start.bracket.tag.bhtml"
                },
                "2": {
                    "name": "tagname.html"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "html.end.tag_definition",
                    "transform": [
                        "trim"
                    ],
                    "patterns": [
                        {
                            "match": "^\\s*\\/\\>",
                            "name": "close.tag",
                            "replaceWith": "(>)(</)($2)(>)",
                            "replaceWithCondition": {
                                "check": "$2",
                                "operator": "!=",
                                "match": "br|hr|img|input|source|link|meta|base|col|embed|param|track|wbr"
                            },
                            "updateParentProps": {
                                "isBlock": false
                            },
                            "captures": {
                                "1": {
                                    "name": "symbol.end.tag.html"
                                },
                                "2": {
                                    "name": "symbol.start.close.tag.html"
                                },
                                "3": {
                                    "name": "tagname.html"
                                },
                                "4": {
                                    "name": "symbol.end.tag.html"
                                }
                            }
                        },
                        {
                            "match": "(\\<\\/)(\\b[\\w][\\w:\\-]*\\b)(\\s*)(\\>)",
                            "name": "end.tag.html",
                            "tokenID": "endtag",
                            "captures": {
                                "1": {
                                    "name": "symbol.end.tag.html"
                                },
                                "2": {
                                    "name": "tagname.html"
                                },
                                "4": {
                                    "name": "symbol.end.tag.html"
                                },
                                "3": {
                                    "name": "ignore.end.tag",
                                    "transform": "trim"
                                }
                            }
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#php-embedded"
                },
                {
                    "include": "#end-html-bracket"
                },
                {
                    "begin": "(?=<\\/\\b([\\w][\\w:\\-]*)\\s*$)",
                    "end": "(?=>)",
                    "comment": "comment stream buffer to handle non well closed tag",
                    "name": "detect.non.well.ended.tagname.html",
                    "streamAction": "parent"
                },
                {
                    "begin": "([\\w\\-]+)\\s*",
                    "end": "(?=([=]|>|\\s|$))",
                    "name": "attribute.html",
                    "tokenID": "attribute",
                    "comment": "detect attribute definition-primary",
                    "beginCaptures": {
                        "0": {
                            "transform": "trim"
                        }
                    }
                },
                {
                    "begin": "\\s*=\\s*",
                    "end": "(?=[\\w]|\\/|\\>)",
                    "name": "operator.attribute.affectation.html",
                    "beginCaptures": {
                        "0": {
                            "transform": "trim"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#string"
                        }
                    ]
                },
                {
                    "include": "#inner-html-block"
                }
            ],
            "formattingMode": 1,
            "updateParentProps": {
                "isBlock": true
            }
        },
        "end-html-bracket": {
            "begin": "\\s*(\\>)",
            "end": "(?=<)",
            "contentName": "variable.name.function.inner.sub.bthml",
            "name": "start.inner.content.bhtml",
            "beginCaptures": {
                "0": {
                    "name": "end.bracket.tag.first.bhtml",
                    "patterns": [
                        {
                            "match": ".+",
                            "transform": "trim"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#php-embedded"
                },
                {
                    "isBlock": true,
                    "comment": "// * beginNonCapture / endNonCapture ==> streamCapture ",
                    "begin": "(?:[^<]+)",
                    "end": "(?=<[a-zA-Z\\/])",
                    "name": "sub-inner......",
                    "patterns": [
                        {
                            "match":"$" ,
                            "formattingMode":1
                        },
                        {
                            "name": "inner.content.bhtml",
                            "match": "[^<]+",
                            "formattingMode": 1,
                            "transform": "trim",
                            "joinWith": null
                        },
                        {
                            "include": "#php-embedded"
                        }
                    ]
                }
            ]
        },
        "php-embedded": {
            "patterns": [
                {
                    "include": "#php-block-embed"
                },
                {
                    "include": "#php-embed-inline"
                }
            ]
        },
        "inner-html": {
            "begin": "(\\>)",
            "end": "(?=\\<(?:\\/)?)",
            "name": "inner.html",
            "comment": "Detect inner content. start block definition if contains global.html.tag.html",
            "requestParentBlockCondition": "child.name == global.html.tag.html",
            "updateParentProps": {
                "isBlock": true
            },
            "beginCaptures": {
                "0": {
                    "name": "start.inner.html"
                },
                "1": {
                    "name": "symbol.inner.end.tag.html"
                }
            },
            "patterns": [
                {
                    "include": "#global-self-closing-html-tag"
                },
                {
                    "include": "#global-html-tag"
                },
                {
                    "include": "#html-space-constant"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#url"
                },
                {
                    "include": "#detect-end-closetag"
                }
            ]
        },
        "detect-end-closetag-": {
            "comment": "detect end close tag",
            "begin": "(?=\\<\\/\\b[\\w](?:[\\w\\d\\-]*(?::[\\w][\\w\\d\\-]*)?)\b)",
            "end": "(?=\\>)",
            "name": "detect.closetag.html",
            "isBlock": false,
            "patterns": [
                {
                    "include": "#join-space"
                }
            ]
        },
        "join-space": {
            "match": "\\s+",
            "name": "white.space.html",
            "replaceWith": " ",
            "isGlueValue": true
        },
        "php-embed-inline": {
            "begin": "(<\\?=)\\s+",
            "end": "\\?>",
            "name": "embeded.php",
            "joinWith":" ",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.section.embedded.begin.php"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.embedded.end.php"
                }
            },
            "contentName": "source.php",
            "patterns": [
                {
                    "include": "source.php"
                }
            ]
        },
        "php-block-embed": {
            "begin": "(<\\?php)(\\s+|$)",
            "end": "\\?>",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.section.embedded.begin.php"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.embedded.end.php"
                }
            },
            "contentName": "source.php",
            "patterns": [
                {
                    "include": "source.php"
                }
            ]
        }
    },
    "patterns": [ 
        { 
            "include":"#php-embedded"
        },
        {
            "include": "#global-self-closing-html-tag"
        },
        {
            "include": "#global-html-tag"
        },
        {
            "include": "#string-named"
        },
        {
            "include": "#string"
        },
        {
            "include": "#url"
        },
        {
            "include": "#comment"
        },
        {
            "include": "#doctype"
        },
        {
            "include": "#end-tag"
        },
        {
            "include": "#processor-expression"
        }
    ],
    "scopeName": "source.bhtml"
}