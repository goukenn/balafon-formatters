{
    "scopeName": "scope.litteralString",
    "settings": {
        "instructionSeparator": ";"
    },
    "patterns": [
        {
            "include": "#single-condition-expression"
        },{
            "include": "#single-else-expression"
        },
        {
            "include":"#core-definition--"
        }
    ],
    "repository": {
        "core-definition":{
            "name":"core.definition.js",
            "patterns":[
                {
                    "include": "#reserved-words"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#trim-multispace"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#branket-function-condition"
                },
                {
                    "include": "#end-instruction"
                },
                {
                    "include": "#block-branket"
                },
                {
                    "include": "#multi-line-comment"
                },
                {
                    "include": "#single-line-comment"
                }
            ]
        },
        "single-condition-expression":{
            "name":"condition.expression.js",
            "begin":"\\b(if|elseif|while|switch)\\b",
            "end":"$",
            "patterns":[
                { "match":"\\s+", "replaceWith":" ", "isGlue":true},
                {"include":"#block-branket"},
                {"include":"#branket-function-condition"},
                {
                    "name":"single.instruct.js",
                    "begin":"(?=[^\\(\\{\\s])",
                    "end":"\\s*(;)\\s*",
                    "patterns":[
                        {
                            "include":"#reserved-words"
                        },
                        {
                            "match": "(?=;)",
                            "name": "operator.end.single.instruction",
                            "isInstructionSeparator": true,
                            "isBlock":true,
                            "closeParent":true
                        }
                    ],
                    "endCaptures":{
                        "0":{
                            "match":";",
                            "transform":"trim"
                        }
                    }
                }
            ]
        },
        "single-else-expression":{
            "name":"else.condition.expression.js",
            "begin":"\\b(else)\\b",
            "end":"$",
            "patterns":[
                { "match":"\\s+", "replaceWith":" ", "isGlue":true},
                {"include":"#block-branket-stop"},
                {"include":"#branket-function-condition"},
                {
                    "name":"single.instruct.js",
                    "begin":"(?=[^\\(\\{\\s])",
                    "end":"\\s*(;)\\s*",
                    "patterns":[
                        {
                            "include":"#reserved-words"
                        },
                        {
                            "match": "(?=;)",
                            "name": "operator.end.single.instruction",
                            "isInstructionSeparator": true,
                            "isBlock":true
                        }
                    ],
                    "endCaptures":{
                        "0":{
                            "match":";",
                            "transform":"trim"
                        }
                    }
                }
            ]
        },
        "reserved-words": {
            "match": "\\b(abstract|arguments|await|boolean|break|byte|case|catch|char|class|const|continue|debugger|default|delete|do|double|else|enum|eval|export|extends|false|final|finally|float|for|function|goto|if|implements|import|in|instanceof|int|interface|let|long|native|new|null|package|private|protected|public|return|short|static|super|switch|synchronized|this|throw|throws|transient|true|try|typeof|var|void|volatile|while|with|yield)\\b",
            "name": "reserved-word",
            "tokenID":"reserved-word"
        },
        "block-branket": {
            "begin": "\\{",
            "end": "\\}",
            "name": "block",
            "isBlock": true,
            "patterns": [
                {
                    "include":"#core-definition"
                }
            ]
        },
        "block-branket-stop": {
            "begin": "\\{",
            "end": "\\}",
            "name": "instruction.block.js",
            "isBlock": true,
            "closeParent":true,
            "patterns": [
                {
                    "include":"#core-definition"
                }
            ]
        },
        "block-branket-in-function": {
            "begin": "\\{",
            "end": "\\}\\s*(?=,|\\))?",
            "name": "block.in.function.js",
            "isBlock": true,
            "beginCaptures":{
                "0":{"name":"begin.brace.js"}
            },
            "endCaptures":{
                "0":{"name":"end.brace.js"}
            }, 
            "patterns": [
                {
                    "include":"#core-definition"
                }
            ]
        },
        "trim-multispace": {
            "match": "\\s+",
            "name": "multi-line-space",
            "replaceWith": " "
        },
        "end-instruction": {
            "match": "(;)",
            "name": "operator.end.instruction",
            "lineFeed": false,
            "isInstructionSeparator": true
        },
        "string": {
            "begin": "(\"|')",
            "end": "($1)",
            "name": "constant.string.litteral",
            "tokenID": "string",
            "captures": {
                "1": {
                    "name": "sting.marker.html",
                    "tokenID": "stringMarker"
                }
            },
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "escaped.string"
                }
            ]
        },
        "branket-function-condition": {
            "begin": "\\s*\\(\\s*",
            "end": "\\s*\\)\\s*",
            "name": "branket.function",
            "transform": "trim",
            "beginCaptures": {
                "0": {
                    "transform": "trim"
                }
            },
            "endCaptures": {
                "0": {
                    "transform": "trim"
                }
            },
            "patterns":[
                {
                    "include":"#string"
                },
                {
                    "include":"#reserved-words"
                },
                {
                    "include": "#branket-function-condition"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#block-branket-in-function"
                }
            ]
        },
        "multi-line-comment": {
            "begin": "\\/\\*",
            "end": "\\*/",
            "name": "constant.comment.multiline",
            "tokenID": "comment",
            "formattingMode": 1
        },
        "single-line-comment": {
            "begin": "\\/\\/",
            "end": "$",
            "name": "constant.comment.single-line",
            "tokenID": "comment",
            "formattingMode": 1
        },
        "number": {
            "match": "(\\.\\d+)|(\\d+(\\.(\\d+)?)?)", 
            "name": "constant.number.js",
            "tokenID": "number",
            "className":"number-class"
        },
        "operators": {
            "match": "\\s*(=>|=((=)?=)?|&(&)?|\\|\\||<=|>=|!)\\s*", 
            "name": "operator.js",
            "tokenID": "operator",
            "className":"op",
            "transform":["trim", "[ $0 ]"],
            "patterns":[
                {
                    "match":"\\s*=>\\s*",
                    "name":"lamda",
                    "transform":"trim"
                }
            ]
        }
    },
    "engine": "html-listener"
}